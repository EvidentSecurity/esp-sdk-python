# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReportIntegrationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create(self, report_ids, integration_id, **kwargs):
        """
        Export all alerts on reports to an integration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(report_ids, integration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] report_ids: An array of report IDs (required)
        :param int integration_id: The ID of the integration to send the alerts to (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(report_ids, integration_id, **kwargs)
        else:
            (data) = self.create_with_http_info(report_ids, integration_id, **kwargs)
            return data

    def create_with_http_info(self, report_ids, integration_id, **kwargs):
        """
        Export all alerts on reports to an integration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(report_ids, integration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] report_ids: An array of report IDs (required)
        :param int integration_id: The ID of the integration to send the alerts to (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_ids', 'integration_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_ids' is set
        if ('report_ids' not in params) or (params['report_ids'] is None):
            raise ValueError("Missing the required parameter `report_ids` when calling `create`")
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params) or (params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `create`")


        collection_formats = {}

        resource_path = '/api/v2/reports/export/integrations.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'report_ids' in params:
            form_params.append(('report_ids', params['report_ids']))
            collection_formats['report_ids'] = 'csv'
        if 'integration_id' in params:
            form_params.append(('integration_id', params['integration_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Meta',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
