# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserRegistrationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create(self, email, first_name, last_name, phone, password, password_confirmation, captcha, organization_attributes, **kwargs):
        """
        A successful call to this API creates a new user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(email, first_name, last_name, phone, password, password_confirmation, captcha, organization_attributes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email: The Email of the new user (required)
        :param str first_name: The new user's first name (required)
        :param str last_name: The new user's last name (required)
        :param str phone: The new user's phone number (required)
        :param str password: The password for the new user (required)
        :param str password_confirmation: The password confirmation for the new user (required)
        :param str captcha: The submitted captcha information for the form (required)
        :param dict(str, str) organization_attributes: The attributes of the Organization the new user is joining (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(email, first_name, last_name, phone, password, password_confirmation, captcha, organization_attributes, **kwargs)
        else:
            (data) = self.create_with_http_info(email, first_name, last_name, phone, password, password_confirmation, captcha, organization_attributes, **kwargs)
            return data

    def create_with_http_info(self, email, first_name, last_name, phone, password, password_confirmation, captcha, organization_attributes, **kwargs):
        """
        A successful call to this API creates a new user
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(email, first_name, last_name, phone, password, password_confirmation, captcha, organization_attributes, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email: The Email of the new user (required)
        :param str first_name: The new user's first name (required)
        :param str last_name: The new user's last name (required)
        :param str phone: The new user's phone number (required)
        :param str password: The password for the new user (required)
        :param str password_confirmation: The password confirmation for the new user (required)
        :param str captcha: The submitted captcha information for the form (required)
        :param dict(str, str) organization_attributes: The attributes of the Organization the new user is joining (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'first_name', 'last_name', 'phone', 'password', 'password_confirmation', 'captcha', 'organization_attributes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `create`")
        # verify the required parameter 'first_name' is set
        if ('first_name' not in params) or (params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `create`")
        # verify the required parameter 'last_name' is set
        if ('last_name' not in params) or (params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `create`")
        # verify the required parameter 'phone' is set
        if ('phone' not in params) or (params['phone'] is None):
            raise ValueError("Missing the required parameter `phone` when calling `create`")
        # verify the required parameter 'password' is set
        if ('password' not in params) or (params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `create`")
        # verify the required parameter 'password_confirmation' is set
        if ('password_confirmation' not in params) or (params['password_confirmation'] is None):
            raise ValueError("Missing the required parameter `password_confirmation` when calling `create`")
        # verify the required parameter 'captcha' is set
        if ('captcha' not in params) or (params['captcha'] is None):
            raise ValueError("Missing the required parameter `captcha` when calling `create`")
        # verify the required parameter 'organization_attributes' is set
        if ('organization_attributes' not in params) or (params['organization_attributes'] is None):
            raise ValueError("Missing the required parameter `organization_attributes` when calling `create`")


        collection_formats = {}

        resource_path = '/api/v2/users/registrations.json_api'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'email' in params:
            form_params.append(('email', params['email']))
        if 'first_name' in params:
            form_params.append(('first_name', params['first_name']))
        if 'last_name' in params:
            form_params.append(('last_name', params['last_name']))
        if 'phone' in params:
            form_params.append(('phone', params['phone']))
        if 'password' in params:
            form_params.append(('password', params['password']))
        if 'password_confirmation' in params:
            form_params.append(('password_confirmation', params['password_confirmation']))
        if 'captcha' in params:
            form_params.append(('captcha', params['captcha']))
        if 'organization_attributes' in params:
            form_params.append(('organization_attributes', params['organization_attributes']))

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
