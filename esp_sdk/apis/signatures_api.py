# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SignaturesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def list(self, **kwargs):
        """
        Get a list of Signatures
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, disabled, supports_user_attribution, name, identifier, description, resolution] Matching Searchable Attributes: [name, identifier, description, resolution] Limited Searchable Attribute: [service_provider_eq] Sortable Attributes: [name, identifier, updated_at, created_at, id] Searchable Associations: [signature_copy, disabled_external_accounts, integrations, suppressions] See Searching Lists for more information. See the filter parameter of the association's list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_http_info(**kwargs)
        else:
            (data) = self.list_with_http_info(**kwargs)
            return data

    def list_with_http_info(self, **kwargs):
        """
        Get a list of Signatures
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, disabled, supports_user_attribution, name, identifier, description, resolution] Matching Searchable Attributes: [name, identifier, description, resolution] Limited Searchable Attribute: [service_provider_eq] Sortable Attributes: [name, identifier, updated_at, created_at, id] Searchable Associations: [signature_copy, disabled_external_accounts, integrations, suppressions] See Searching Lists for more information. See the filter parameter of the association's list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include', 'filter', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/api/v2/signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filter' in params:
            form_params.append(('filter', params['filter']))
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_disabled_external_accounts(self, signature_id, **kwargs):
        """
        Get a list of disabled External Accounts for a signature
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_disabled_external_accounts(signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int signature_id: The ID of the signature to get the list of disabled external accounts for (required)
        :param str include: Related objects that can be included in the response:  organization, sub_organization, team, scan_intervals, disabled_signatures, suppressions, azure_group, credentials See Including Objects for more information.
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, nickname, name] Matching Searchable Attributes: [nickname, name] Limited Searchable Attributes: [account_eq, arn_eq, provider_eq, subscription_id_eq] Sortable Attributes: [name, updated_at, created_at, id] Searchable Associations: [organization, sub_organization, team, compliance_standards, azure_group, disabled_signatures, suppressions] See Searching Lists for more information. See the filter parameter of the association's list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_disabled_external_accounts_with_http_info(signature_id, **kwargs)
        else:
            (data) = self.list_disabled_external_accounts_with_http_info(signature_id, **kwargs)
            return data

    def list_disabled_external_accounts_with_http_info(self, signature_id, **kwargs):
        """
        Get a list of disabled External Accounts for a signature
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_disabled_external_accounts_with_http_info(signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int signature_id: The ID of the signature to get the list of disabled external accounts for (required)
        :param str include: Related objects that can be included in the response:  organization, sub_organization, team, scan_intervals, disabled_signatures, suppressions, azure_group, credentials See Including Objects for more information.
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, nickname, name] Matching Searchable Attributes: [nickname, name] Limited Searchable Attributes: [account_eq, arn_eq, provider_eq, subscription_id_eq] Sortable Attributes: [name, updated_at, created_at, id] Searchable Associations: [organization, sub_organization, team, compliance_standards, azure_group, disabled_signatures, suppressions] See Searching Lists for more information. See the filter parameter of the association's list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['signature_id', 'include', 'filter', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_disabled_external_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `list_disabled_external_accounts`")


        collection_formats = {}

        resource_path = '/api/v2/signatures/{signature_id}/disabled_external_accounts.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'signature_id' in params:
            path_params['signature_id'] = params['signature_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filter' in params:
            form_params.append(('filter', params['filter']))
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_with_custom_risk_level_for_external_account(self, external_account_id, **kwargs):
        """
        Get A list of Signatures with default and custom risk levels for an External Account
        Return only signatures that have a custom risk level set by searching with `filter:{custom_risk_level_present: 1}`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_custom_risk_level_for_external_account(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to retrieve (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, disabled, supports_user_attribution, name, identifier, description, resolution] Matching Searchable Attributes: [name, identifier, description, resolution] Limited Searchable Attributes: [custom_risk_level_present, service_provider_eq] Sortable Attributes: [name, identifier, updated_at, created_at, id] Searchable Associations: [signature_copy, disabled_external_accounts, integrations, suppressions] See Searching Lists for more information. See the filter parameter of the association's list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_custom_risk_level_for_external_account_with_http_info(external_account_id, **kwargs)
        else:
            (data) = self.list_with_custom_risk_level_for_external_account_with_http_info(external_account_id, **kwargs)
            return data

    def list_with_custom_risk_level_for_external_account_with_http_info(self, external_account_id, **kwargs):
        """
        Get A list of Signatures with default and custom risk levels for an External Account
        Return only signatures that have a custom risk level set by searching with `filter:{custom_risk_level_present: 1}`
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_custom_risk_level_for_external_account_with_http_info(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to retrieve (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, disabled, supports_user_attribution, name, identifier, description, resolution] Matching Searchable Attributes: [name, identifier, description, resolution] Limited Searchable Attributes: [custom_risk_level_present, service_provider_eq] Sortable Attributes: [name, identifier, updated_at, created_at, id] Searchable Associations: [signature_copy, disabled_external_accounts, integrations, suppressions] See Searching Lists for more information. See the filter parameter of the association's list action to see what attributes are searchable on each association. See Conditions on Relationships in Searching Lists for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'include', 'filter', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_with_custom_risk_level_for_external_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `list_with_custom_risk_level_for_external_account`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/signature_custom_risk_levels.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filter' in params:
            form_params.append(('filter', params['filter']))
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_custom_risk_level_for_external_account(self, external_account_id, signature_id, **kwargs):
        """
        Remove a custom risk level to a Signature for an External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_custom_risk_level_for_external_account(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account this signature custom risk level is for (required)
        :param int signature_id: The signature ID this signature custom risk level is for (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_custom_risk_level_for_external_account_with_http_info(external_account_id, signature_id, **kwargs)
        else:
            (data) = self.remove_custom_risk_level_for_external_account_with_http_info(external_account_id, signature_id, **kwargs)
            return data

    def remove_custom_risk_level_for_external_account_with_http_info(self, external_account_id, signature_id, **kwargs):
        """
        Remove a custom risk level to a Signature for an External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_custom_risk_level_for_external_account_with_http_info(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account this signature custom risk level is for (required)
        :param int signature_id: The signature ID this signature custom risk level is for (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'signature_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_custom_risk_level_for_external_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `remove_custom_risk_level_for_external_account`")
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `remove_custom_risk_level_for_external_account`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/signature_custom_risk_levels/{signature_id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']
        if 'signature_id' in params:
            path_params['signature_id'] = params['signature_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Meta',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_custom_risk_level_for_external_account(self, external_account_id, risk_level, signature_id, **kwargs):
        """
        Add a custom risk level to a Signature for an External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_custom_risk_level_for_external_account(external_account_id, risk_level, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account this signature custom risk level is for (required)
        :param str risk_level: The custom risk-level of the problem identified by the signature for this external_account. Valid values are low, medium, high (required)
        :param int signature_id: The signature ID this signature custom risk level is for (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_custom_risk_level_for_external_account_with_http_info(external_account_id, risk_level, signature_id, **kwargs)
        else:
            (data) = self.set_custom_risk_level_for_external_account_with_http_info(external_account_id, risk_level, signature_id, **kwargs)
            return data

    def set_custom_risk_level_for_external_account_with_http_info(self, external_account_id, risk_level, signature_id, **kwargs):
        """
        Add a custom risk level to a Signature for an External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_custom_risk_level_for_external_account_with_http_info(external_account_id, risk_level, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account this signature custom risk level is for (required)
        :param str risk_level: The custom risk-level of the problem identified by the signature for this external_account. Valid values are low, medium, high (required)
        :param int signature_id: The signature ID this signature custom risk level is for (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'risk_level', 'signature_id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_custom_risk_level_for_external_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `set_custom_risk_level_for_external_account`")
        # verify the required parameter 'risk_level' is set
        if ('risk_level' not in params) or (params['risk_level'] is None):
            raise ValueError("Missing the required parameter `risk_level` when calling `set_custom_risk_level_for_external_account`")
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `set_custom_risk_level_for_external_account`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/signature_custom_risk_levels.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'risk_level' in params:
            form_params.append(('risk_level', params['risk_level']))
        if 'signature_id' in params:
            form_params.append(('signature_id', params['signature_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Signature',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show(self, id, **kwargs):
        """
        Show a single Signature
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Signature ID (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_with_http_info(id, **kwargs)
        else:
            (data) = self.show_with_http_info(id, **kwargs)
            return data

    def show_with_http_info(self, id, **kwargs):
        """
        Show a single Signature
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Signature ID (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `show`")


        collection_formats = {}

        resource_path = '/api/v2/signatures/{id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Signature',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_custom_risk_level_for_external_account(self, external_account_id, signature_id, **kwargs):
        """
        Update a Signature's custom risk level for an External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_custom_risk_level_for_external_account(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account this signature custom risk level is for (required)
        :param int signature_id: The signature ID this signature custom risk level is for (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param str risk_level: The custom risk-level of the problem identified by the signature for this external_account. Valid values are low, medium, high
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_custom_risk_level_for_external_account_with_http_info(external_account_id, signature_id, **kwargs)
        else:
            (data) = self.update_custom_risk_level_for_external_account_with_http_info(external_account_id, signature_id, **kwargs)
            return data

    def update_custom_risk_level_for_external_account_with_http_info(self, external_account_id, signature_id, **kwargs):
        """
        Update a Signature's custom risk level for an External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_custom_risk_level_for_external_account_with_http_info(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account this signature custom risk level is for (required)
        :param int signature_id: The signature ID this signature custom risk level is for (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param str risk_level: The custom risk-level of the problem identified by the signature for this external_account. Valid values are low, medium, high
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'signature_id', 'include', 'risk_level']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_risk_level_for_external_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `update_custom_risk_level_for_external_account`")
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `update_custom_risk_level_for_external_account`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/signature_custom_risk_levels/{signature_id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']
        if 'signature_id' in params:
            path_params['signature_id'] = params['signature_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'risk_level' in params:
            form_params.append(('risk_level', params['risk_level']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Signature',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
