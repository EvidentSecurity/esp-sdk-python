# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ExternalAccountDisabledSignaturesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create(self, external_account_id, signature_id, **kwargs):
        """
        A successful call to this API will disable a signature for an external account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to disable a signature on. (required)
        :param int signature_id: The ID of the signature to disable (required)
        :return: SuccessObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(external_account_id, signature_id, **kwargs)
        else:
            (data) = self.create_with_http_info(external_account_id, signature_id, **kwargs)
            return data

    def create_with_http_info(self, external_account_id, signature_id, **kwargs):
        """
        A successful call to this API will disable a signature for an external account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to disable a signature on. (required)
        :param int signature_id: The ID of the signature to disable (required)
        :return: SuccessObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'signature_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `create`")
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `create`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/disabled_signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'signature_id' in params:
            form_params.append(('signature_id', params['signature_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SuccessObject',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destroy(self, external_account_id, signature_id, **kwargs):
        """
        A successful call to this API will remove a signature from the disabled signature list on an external account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to enable the signature on. (required)
        :param int signature_id: The ID of the signature to enable (required)
        :return: SuccessObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destroy_with_http_info(external_account_id, signature_id, **kwargs)
        else:
            (data) = self.destroy_with_http_info(external_account_id, signature_id, **kwargs)
            return data

    def destroy_with_http_info(self, external_account_id, signature_id, **kwargs):
        """
        A successful call to this API will remove a signature from the disabled signature list on an external account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_with_http_info(external_account_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to enable the signature on. (required)
        :param int signature_id: The ID of the signature to enable (required)
        :return: SuccessObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'signature_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `destroy`")
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `destroy`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/disabled_signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'signature_id' in params:
            form_params.append(('signature_id', params['signature_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SuccessObject',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list(self, external_account_id, **kwargs):
        """
        A successful call to this API returns all the disabled signatures of the associated external account, identified by the external_account_id parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to retrieve the disabled signatures for. (required)
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, disabled, supports_user_attribution, name, identifier, description, resolution] Matching Searchable Attributes: [name, identifier, description, resolution]  Sortable Attributes: [name, identifier, updated_at, created_at, id] Searchable Associations: [signature_copy, disabled_external_accounts, integrations] See the filter parameter of the association's list action to see what attributes are searchable on each association. See Searching on Relationships for more information. See Searching Lists for more information. Example: filter: {name_eq: 'Bob'}
        :param str include: Objects that can be included in the response:  service,disabled_external_accounts  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_http_info(external_account_id, **kwargs)
        else:
            (data) = self.list_with_http_info(external_account_id, **kwargs)
            return data

    def list_with_http_info(self, external_account_id, **kwargs):
        """
        A successful call to this API returns all the disabled signatures of the associated external account, identified by the external_account_id parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_http_info(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to retrieve the disabled signatures for. (required)
        :param dict(str, str) filter: Filter Params for Searching.  Equality Searchable Attributes: [id, risk_level, service_id, disabled, supports_user_attribution, name, identifier, description, resolution] Matching Searchable Attributes: [name, identifier, description, resolution]  Sortable Attributes: [name, identifier, updated_at, created_at, id] Searchable Associations: [signature_copy, disabled_external_accounts, integrations] See the filter parameter of the association's list action to see what attributes are searchable on each association. See Searching on Relationships for more information. See Searching Lists for more information. Example: filter: {name_eq: 'Bob'}
        :param str include: Objects that can be included in the response:  service,disabled_external_accounts  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'filter', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `list`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/disabled_signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filter' in params:
            form_params.append(('filter', params['filter']))
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, external_account_id, disabled_signature_ids, **kwargs):
        """
        A successful call to this API will update the disabled signatures on an external account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(external_account_id, disabled_signature_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to update the disabled signatures of. (required)
        :param list[int] disabled_signature_ids: An array of all the signatures to disable on the external account. (required)
        :return: ExternalAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(external_account_id, disabled_signature_ids, **kwargs)
        else:
            (data) = self.update_with_http_info(external_account_id, disabled_signature_ids, **kwargs)
            return data

    def update_with_http_info(self, external_account_id, disabled_signature_ids, **kwargs):
        """
        A successful call to this API will update the disabled signatures on an external account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(external_account_id, disabled_signature_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to update the disabled signatures of. (required)
        :param list[int] disabled_signature_ids: An array of all the signatures to disable on the external account. (required)
        :return: ExternalAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'disabled_signature_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `update`")
        # verify the required parameter 'disabled_signature_ids' is set
        if ('disabled_signature_ids' not in params) or (params['disabled_signature_ids'] is None):
            raise ValueError("Missing the required parameter `disabled_signature_ids` when calling `update`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/disabled_signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'disabled_signature_ids' in params:
            form_params.append(('disabled_signature_ids', params['disabled_signature_ids']))
            collection_formats['disabled_signature_ids'] = 'csv'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExternalAccount',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
