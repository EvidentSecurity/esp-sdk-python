# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ExternalAccountsAzureApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create(self, app_key, client_id, name, subscription_id, team_id, tenant_id, **kwargs):
        """
        Create an Azure External Account
        The channel_url will only be returned in this response and will not be accessible again. The related external_account object will be returned with the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(app_key, client_id, name, subscription_id, team_id, tenant_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_key: Azure app key (required)
        :param str client_id: Azure client ID (required)
        :param str name: Name (required)
        :param str subscription_id: Azure subscription ID (required)
        :param int team_id: The ID of the team the external account belongs to (required)
        :param str tenant_id: Azure tenant ID (required)
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(app_key, client_id, name, subscription_id, team_id, tenant_id, **kwargs)
        else:
            (data) = self.create_with_http_info(app_key, client_id, name, subscription_id, team_id, tenant_id, **kwargs)
            return data

    def create_with_http_info(self, app_key, client_id, name, subscription_id, team_id, tenant_id, **kwargs):
        """
        Create an Azure External Account
        The channel_url will only be returned in this response and will not be accessible again. The related external_account object will be returned with the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(app_key, client_id, name, subscription_id, team_id, tenant_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_key: Azure app key (required)
        :param str client_id: Azure client ID (required)
        :param str name: Name (required)
        :param str subscription_id: Azure subscription ID (required)
        :param int team_id: The ID of the team the external account belongs to (required)
        :param str tenant_id: Azure tenant ID (required)
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_key', 'client_id', 'name', 'subscription_id', 'team_id', 'tenant_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_key' is set
        if ('app_key' not in params) or (params['app_key'] is None):
            raise ValueError("Missing the required parameter `app_key` when calling `create`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `create`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create`")
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params) or (params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `create`")
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params) or (params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `create`")
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params) or (params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `create`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/azure.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'app_key' in params:
            form_params.append(('app_key', params['app_key']))
        if 'client_id' in params:
            form_params.append(('client_id', params['client_id']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'subscription_id' in params:
            form_params.append(('subscription_id', params['subscription_id']))
        if 'team_id' in params:
            form_params.append(('team_id', params['team_id']))
        if 'tenant_id' in params:
            form_params.append(('tenant_id', params['tenant_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExternalAccountAzure',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reset_url(self, external_account_id, **kwargs):
        """
        Reset Log URL for an Azure External Account
        This endpoint invalidates the previous URL and generates a new one. The channel_url will only be returned in this response and will not be accessible again. The related external_account object will be returned with the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_url(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to reset an Azure log URL for (required)
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reset_url_with_http_info(external_account_id, **kwargs)
        else:
            (data) = self.reset_url_with_http_info(external_account_id, **kwargs)
            return data

    def reset_url_with_http_info(self, external_account_id, **kwargs):
        """
        Reset Log URL for an Azure External Account
        This endpoint invalidates the previous URL and generates a new one. The channel_url will only be returned in this response and will not be accessible again. The related external_account object will be returned with the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_url_with_http_info(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to reset an Azure log URL for (required)
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `reset_url`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/azure/log_url.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExternalAccountAzure',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show(self, external_account_id, **kwargs):
        """
        Show an Azure External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to show an Azure credential for (required)
        :param str include: Related objects that can be included in the response:  external_account See Including Objects for more information.
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_with_http_info(external_account_id, **kwargs)
        else:
            (data) = self.show_with_http_info(external_account_id, **kwargs)
            return data

    def show_with_http_info(self, external_account_id, **kwargs):
        """
        Show an Azure External Account
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_with_http_info(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to show an Azure credential for (required)
        :param str include: Related objects that can be included in the response:  external_account See Including Objects for more information.
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `show`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/azure.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExternalAccountAzure',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, external_account_id, **kwargs):
        """
        Update an Azure External Account
         The related external_account object will be returned with the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to update an Azure credential for (required)
        :param str app_key: Azure app key
        :param str client_id: Azure client ID
        :param str name: Name
        :param str subscription_id: Azure subscription ID
        :param int team_id: The ID of the team the external account belongs to
        :param str tenant_id: Azure tenant ID
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(external_account_id, **kwargs)
        else:
            (data) = self.update_with_http_info(external_account_id, **kwargs)
            return data

    def update_with_http_info(self, external_account_id, **kwargs):
        """
        Update an Azure External Account
         The related external_account object will be returned with the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(external_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int external_account_id: The ID of the external account to update an Azure credential for (required)
        :param str app_key: Azure app key
        :param str client_id: Azure client ID
        :param str name: Name
        :param str subscription_id: Azure subscription ID
        :param int team_id: The ID of the team the external account belongs to
        :param str tenant_id: Azure tenant ID
        :return: ExternalAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_account_id', 'app_key', 'client_id', 'name', 'subscription_id', 'team_id', 'tenant_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_account_id' is set
        if ('external_account_id' not in params) or (params['external_account_id'] is None):
            raise ValueError("Missing the required parameter `external_account_id` when calling `update`")


        collection_formats = {}

        resource_path = '/api/v2/external_accounts/{external_account_id}/azure.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'external_account_id' in params:
            path_params['external_account_id'] = params['external_account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'app_key' in params:
            form_params.append(('app_key', params['app_key']))
        if 'client_id' in params:
            form_params.append(('client_id', params['client_id']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'subscription_id' in params:
            form_params.append(('subscription_id', params['subscription_id']))
        if 'team_id' in params:
            form_params.append(('team_id', params['team_id']))
        if 'tenant_id' in params:
            form_params.append(('tenant_id', params['tenant_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExternalAccountAzure',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
