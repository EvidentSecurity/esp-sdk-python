# coding: utf-8

"""
    ESP Documentation

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AlertsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def list(self, report_id, **kwargs):
        """
        Get a list of Alerts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int report_id: Id of the Report to Return Alerts For (required)
        :param dict(str, str) page: Page Number
        :param dict(str, str) filter: Filter Params for Searching
        :param str include: Included Objects
        :param int region_id: Return only alerts for this region.
        :param str status: Return only alerts for the give status(es). Valid values are fail, warn, error, pass, info
        :param int first_seen: Return only alerts that have started within a number of hours of the report. For example, first_seen of 3 will return alerts that started showing up within the last 3 hours of the report.
        :param bool suppressed: Return only suppressed alerts
        :param int team_id: Return only alerts for the given team.
        :param int external_account_id: Return only alerts for the given external id.
        :param int service_id: Return only alerts on signatures with the given service.
        :param str signature_severity: Return only alerts for signatures with the given risk_level. Valid values are Low, Medium, High
        :param str signature_name: Return only alerts for signatures with the given name.
        :param str resource: Return only alerts for the given resource or tag.
        :param str signature_identifier: Return only alerts for signatures with the given identifier.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_http_info(report_id, **kwargs)
        else:
            (data) = self.list_with_http_info(report_id, **kwargs)
            return data

    def list_with_http_info(self, report_id, **kwargs):
        """
        Get a list of Alerts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_http_info(report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int report_id: Id of the Report to Return Alerts For (required)
        :param dict(str, str) page: Page Number
        :param dict(str, str) filter: Filter Params for Searching
        :param str include: Included Objects
        :param int region_id: Return only alerts for this region.
        :param str status: Return only alerts for the give status(es). Valid values are fail, warn, error, pass, info
        :param int first_seen: Return only alerts that have started within a number of hours of the report. For example, first_seen of 3 will return alerts that started showing up within the last 3 hours of the report.
        :param bool suppressed: Return only suppressed alerts
        :param int team_id: Return only alerts for the given team.
        :param int external_account_id: Return only alerts for the given external id.
        :param int service_id: Return only alerts on signatures with the given service.
        :param str signature_severity: Return only alerts for signatures with the given risk_level. Valid values are Low, Medium, High
        :param str signature_name: Return only alerts for signatures with the given name.
        :param str resource: Return only alerts for the given resource or tag.
        :param str signature_identifier: Return only alerts for signatures with the given identifier.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_id', 'page', 'filter', 'include', 'region_id', 'status', 'first_seen', 'suppressed', 'team_id', 'external_account_id', 'service_id', 'signature_severity', 'signature_name', 'resource', 'signature_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params) or (params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `list`")


        collection_formats = {}

        resource_path = '/api/v2/reports/{report_id}/alerts.json_api'.replace('{format}', 'json')
        path_params = {}
        if 'report_id' in params:
            path_params['report_id'] = params['report_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))
        if 'filter' in params:
            form_params.append(('filter', params['filter']))
        if 'region_id' in params:
            form_params.append(('region_id', params['region_id']))
        if 'status' in params:
            form_params.append(('status', params['status']))
        if 'first_seen' in params:
            form_params.append(('first_seen', params['first_seen']))
        if 'suppressed' in params:
            form_params.append(('suppressed', params['suppressed']))
        if 'team_id' in params:
            form_params.append(('team_id', params['team_id']))
        if 'external_account_id' in params:
            form_params.append(('external_account_id', params['external_account_id']))
        if 'service_id' in params:
            form_params.append(('service_id', params['service_id']))
        if 'signature_severity' in params:
            form_params.append(('signature_severity', params['signature_severity']))
        if 'signature_name' in params:
            form_params.append(('signature_name', params['signature_name']))
        if 'resource' in params:
            form_params.append(('resource', params['resource']))
        if 'signature_identifier' in params:
            form_params.append(('signature_identifier', params['signature_identifier']))

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show(self, id, **kwargs):
        """
        Show a single Alert
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Alert Id (required)
        :param str include: Included Objects
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_with_http_info(id, **kwargs)
        else:
            (data) = self.show_with_http_info(id, **kwargs)
            return data

    def show_with_http_info(self, id, **kwargs):
        """
        Show a single Alert
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Alert Id (required)
        :param str include: Included Objects
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `show`")


        collection_formats = {}

        resource_path = '/api/v2/alerts/{id}.json_api'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Alert',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
