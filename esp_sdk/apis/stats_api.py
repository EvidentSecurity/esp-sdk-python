# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class StatsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def for_compliance_controls(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the compliance controls for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all compliance controls for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_compliance_controls(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve compliance control stats for (required)
        :param str include: Objects that can be included in the response:  compliance_control,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.for_compliance_controls_with_http_info(stat_id, **kwargs)
        else:
            (data) = self.for_compliance_controls_with_http_info(stat_id, **kwargs)
            return data

    def for_compliance_controls_with_http_info(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the compliance controls for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all compliance controls for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_compliance_controls_with_http_info(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve compliance control stats for (required)
        :param str include: Objects that can be included in the response:  compliance_control,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stat_id', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method for_compliance_controls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stat_id' is set
        if ('stat_id' not in params) or (params['stat_id'] is None):
            raise ValueError("Missing the required parameter `stat_id` when calling `for_compliance_controls`")


        collection_formats = {}

        resource_path = '/api/v2/stats/{stat_id}/compliance_controls.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'stat_id' in params:
            path_params['stat_id'] = params['stat_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def for_custom_signatures(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the custom signatures for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all custom_signatures for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_custom_signatures(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve custom signature stats for (required)
        :param str include: Objects that can be included in the response:  custom_signature,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.for_custom_signatures_with_http_info(stat_id, **kwargs)
        else:
            (data) = self.for_custom_signatures_with_http_info(stat_id, **kwargs)
            return data

    def for_custom_signatures_with_http_info(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the custom signatures for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all custom_signatures for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_custom_signatures_with_http_info(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve custom signature stats for (required)
        :param str include: Objects that can be included in the response:  custom_signature,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stat_id', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method for_custom_signatures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stat_id' is set
        if ('stat_id' not in params) or (params['stat_id'] is None):
            raise ValueError("Missing the required parameter `stat_id` when calling `for_custom_signatures`")


        collection_formats = {}

        resource_path = '/api/v2/stats/{stat_id}/custom_signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'stat_id' in params:
            path_params['stat_id'] = params['stat_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def for_regions(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the regions for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all regions for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_regions(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve region stats for (required)
        :param str include: Objects that can be included in the response:  region,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.for_regions_with_http_info(stat_id, **kwargs)
        else:
            (data) = self.for_regions_with_http_info(stat_id, **kwargs)
            return data

    def for_regions_with_http_info(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the regions for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all regions for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_regions_with_http_info(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve region stats for (required)
        :param str include: Objects that can be included in the response:  region,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stat_id', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method for_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stat_id' is set
        if ('stat_id' not in params) or (params['stat_id'] is None):
            raise ValueError("Missing the required parameter `stat_id` when calling `for_regions`")


        collection_formats = {}

        resource_path = '/api/v2/stats/{stat_id}/regions.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'stat_id' in params:
            path_params['stat_id'] = params['stat_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def for_report(self, report_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the alerts for a report identified by the report_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all regions for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_report(report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int report_id: The ID of the report to retrieve stats for (required)
        :param str include: Objects that can be included in the response:  report,regions,services,signatures,custom_signatures  See Including Objects for more information.
        :return: Stat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.for_report_with_http_info(report_id, **kwargs)
        else:
            (data) = self.for_report_with_http_info(report_id, **kwargs)
            return data

    def for_report_with_http_info(self, report_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the alerts for a report identified by the report_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all regions for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_report_with_http_info(report_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int report_id: The ID of the report to retrieve stats for (required)
        :param str include: Objects that can be included in the response:  report,regions,services,signatures,custom_signatures  See Including Objects for more information.
        :return: Stat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method for_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_id' is set
        if ('report_id' not in params) or (params['report_id'] is None):
            raise ValueError("Missing the required parameter `report_id` when calling `for_report`")


        collection_formats = {}

        resource_path = '/api/v2/reports/{report_id}/stats.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'report_id' in params:
            path_params['report_id'] = params['report_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Stat',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def for_services(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the services for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all services for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_services(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve service stats for (required)
        :param str include: Objects that can be included in the response:  service,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.for_services_with_http_info(stat_id, **kwargs)
        else:
            (data) = self.for_services_with_http_info(stat_id, **kwargs)
            return data

    def for_services_with_http_info(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the services for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all services for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_services_with_http_info(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve service stats for (required)
        :param str include: Objects that can be included in the response:  service,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stat_id', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method for_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stat_id' is set
        if ('stat_id' not in params) or (params['stat_id'] is None):
            raise ValueError("Missing the required parameter `stat_id` when calling `for_services`")


        collection_formats = {}

        resource_path = '/api/v2/stats/{stat_id}/services.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'stat_id' in params:
            path_params['stat_id'] = params['stat_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def for_signatures(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the signatures for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all signatures for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_signatures(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve signature stats for (required)
        :param str include: Objects that can be included in the response:  signature,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.for_signatures_with_http_info(stat_id, **kwargs)
        else:
            (data) = self.for_signatures_with_http_info(stat_id, **kwargs)
            return data

    def for_signatures_with_http_info(self, stat_id, **kwargs):
        """
        A successful call to this API returns all the stats of all the signatures for a report identified by the stat_id parameter. Said report contains all statistics for this alert triggered from signatures contained in all signatures for the selected hour.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.for_signatures_with_http_info(stat_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int stat_id: The ID of the stat to retrieve signature stats for (required)
        :param str include: Objects that can be included in the response:  signature,stat  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stat_id', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method for_signatures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stat_id' is set
        if ('stat_id' not in params) or (params['stat_id'] is None):
            raise ValueError("Missing the required parameter `stat_id` when calling `for_signatures`")


        collection_formats = {}

        resource_path = '/api/v2/stats/{stat_id}/signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'stat_id' in params:
            path_params['stat_id'] = params['stat_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def latest_for_teams(self, **kwargs):
        """
        A successful call to this API returns all the stats for the most recent report of each team accessible by the given API key
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.latest_for_teams(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str include: Objects that can be included in the response:  report,regions,services,signatures,custom_signatures  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.latest_for_teams_with_http_info(**kwargs)
        else:
            (data) = self.latest_for_teams_with_http_info(**kwargs)
            return data

    def latest_for_teams_with_http_info(self, **kwargs):
        """
        A successful call to this API returns all the stats for the most recent report of each team accessible by the given API key
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.latest_for_teams_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str include: Objects that can be included in the response:  report,regions,services,signatures,custom_signatures  See Including Objects for more information.
        :param dict(str, str) page: Page Number and Page Size.  Example: page: {number: 1, size: 20}
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method latest_for_teams" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/api/v2/stats/latest_for_teams.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show(self, id, **kwargs):
        """
        Show a single Stat
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Stat Id (required)
        :param str include: Objects that can be included in the response:  report,regions,services,signatures,custom_signatures  See Including Objects for more information.
        :return: Stat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_with_http_info(id, **kwargs)
        else:
            (data) = self.show_with_http_info(id, **kwargs)
            return data

    def show_with_http_info(self, id, **kwargs):
        """
        Show a single Stat
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Stat Id (required)
        :param str include: Objects that can be included in the response:  report,regions,services,signatures,custom_signatures  See Including Objects for more information.
        :return: Stat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `show`")


        collection_formats = {}

        resource_path = '/api/v2/stats/{id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Stat',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
