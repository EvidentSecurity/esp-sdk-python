# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SuppressionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def deactivate(self, id, **kwargs):
        """
        A successful call to this API will deactivate a suppression identified by the id parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deactivate(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Suppression ID (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deactivate_with_http_info(id, **kwargs)
        else:
            (data) = self.deactivate_with_http_info(id, **kwargs)
            return data

    def deactivate_with_http_info(self, id, **kwargs):
        """
        A successful call to this API will deactivate a suppression identified by the id parameter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deactivate_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Suppression ID (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `deactivate`")


        collection_formats = {}

        resource_path = '/api/v2/suppressions/{id}/deactivate.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suppression',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list(self, **kwargs):
        """
        Get a list of Suppressions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param dict(str, str) filter: Filter Params for Searching.  See Searching Lists for more information.
        :param str include: Related objects that can be included in the response.  See Including Objects for more information.
        :param str page: Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_http_info(**kwargs)
        else:
            (data) = self.list_with_http_info(**kwargs)
            return data

    def list_with_http_info(self, **kwargs):
        """
        Get a list of Suppressions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param dict(str, str) filter: Filter Params for Searching.  See Searching Lists for more information.
        :param str include: Related objects that can be included in the response.  See Including Objects for more information.
        :param str page: Page Number and Page Size.  number is the page number of the collection to return, size is the number of items to return per page
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/api/v2/suppressions.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filter' in params:
            form_params.append(('filter', params['filter']))
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show(self, id, **kwargs):
        """
        Show a single Suppression
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Suppression ID (required)
        :param str include: Related objects that can be included in the response.  See Including Objects for more information.
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_with_http_info(id, **kwargs)
        else:
            (data) = self.show_with_http_info(id, **kwargs)
            return data

    def show_with_http_info(self, id, **kwargs):
        """
        Show a single Suppression
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Suppression ID (required)
        :param str include: Related objects that can be included in the response.  See Including Objects for more information.
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `show`")


        collection_formats = {}

        resource_path = '/api/v2/suppressions/{id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suppression',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suppress_region(self, regions, external_account_ids, reason, **kwargs):
        """
        A successful call to this API creates a new region suppression for the supplied regions. The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_region(regions, external_account_ids, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] regions: An array of region names to suppress (required)
        :param list[int] external_account_ids: An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on (required)
        :param str reason: The reason for creating the suppression (required)
        :param str resource: The resource string this suppression will suppress alerts for
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suppress_region_with_http_info(regions, external_account_ids, reason, **kwargs)
        else:
            (data) = self.suppress_region_with_http_info(regions, external_account_ids, reason, **kwargs)
            return data

    def suppress_region_with_http_info(self, regions, external_account_ids, reason, **kwargs):
        """
        A successful call to this API creates a new region suppression for the supplied regions. The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_region_with_http_info(regions, external_account_ids, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] regions: An array of region names to suppress (required)
        :param list[int] external_account_ids: An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on (required)
        :param str reason: The reason for creating the suppression (required)
        :param str resource: The resource string this suppression will suppress alerts for
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['regions', 'external_account_ids', 'reason', 'resource']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppress_region" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'regions' is set
        if ('regions' not in params) or (params['regions'] is None):
            raise ValueError("Missing the required parameter `regions` when calling `suppress_region`")
        # verify the required parameter 'external_account_ids' is set
        if ('external_account_ids' not in params) or (params['external_account_ids'] is None):
            raise ValueError("Missing the required parameter `external_account_ids` when calling `suppress_region`")
        # verify the required parameter 'reason' is set
        if ('reason' not in params) or (params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `suppress_region`")


        collection_formats = {}

        resource_path = '/api/v2/suppressions/regions.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'regions' in params:
            form_params.append(('regions', params['regions']))
            collection_formats['regions'] = 'csv'
        if 'external_account_ids' in params:
            form_params.append(('external_account_ids', params['external_account_ids']))
            collection_formats['external_account_ids'] = 'csv'
        if 'reason' in params:
            form_params.append(('reason', params['reason']))
        if 'resource' in params:
            form_params.append(('resource', params['resource']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suppression',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suppress_region_from_alert(self, alert_id, reason, **kwargs):
        """
        A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_region_from_alert(alert_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int alert_id: The ID for the alert you want to create a suppression for (required)
        :param str reason: The reason for creating the suppression (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suppress_region_from_alert_with_http_info(alert_id, reason, **kwargs)
        else:
            (data) = self.suppress_region_from_alert_with_http_info(alert_id, reason, **kwargs)
            return data

    def suppress_region_from_alert_with_http_info(self, alert_id, reason, **kwargs):
        """
        A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/regions.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_region_from_alert_with_http_info(alert_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int alert_id: The ID for the alert you want to create a suppression for (required)
        :param str reason: The reason for creating the suppression (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_id', 'reason']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppress_region_from_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_id' is set
        if ('alert_id' not in params) or (params['alert_id'] is None):
            raise ValueError("Missing the required parameter `alert_id` when calling `suppress_region_from_alert`")
        # verify the required parameter 'reason' is set
        if ('reason' not in params) or (params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `suppress_region_from_alert`")


        collection_formats = {}

        resource_path = '/api/v2/suppressions/alert/{alert_id}/regions.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'alert_id' in params:
            form_params.append(('alert_id', params['alert_id']))
        if 'reason' in params:
            form_params.append(('reason', params['reason']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suppression',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suppress_signature(self, regions, external_account_ids, reason, **kwargs):
        """
        A successful call to this API creates a new signature suppression for the supplied signature_ids or custom_signature_ids. The body of the request must contain a json API compliant hash of attributes with type suppression/signatures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_signature(regions, external_account_ids, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] regions: An array of region names to suppress (required)
        :param list[int] external_account_ids: An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on (required)
        :param str reason: The reason for creating the suppression (required)
        :param list[int] signature_ids: An array of signatures identified by signature_id to suppress. Required if custom_signature_ids is blank.
        :param list[int] custom_signature_ids: An array of custom signatures identified by custom_signature_id to suppress. Required if signature_ids is blank.
        :param str resource: The resource string this suppression will suppress alerts for
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suppress_signature_with_http_info(regions, external_account_ids, reason, **kwargs)
        else:
            (data) = self.suppress_signature_with_http_info(regions, external_account_ids, reason, **kwargs)
            return data

    def suppress_signature_with_http_info(self, regions, external_account_ids, reason, **kwargs):
        """
        A successful call to this API creates a new signature suppression for the supplied signature_ids or custom_signature_ids. The body of the request must contain a json API compliant hash of attributes with type suppression/signatures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_signature_with_http_info(regions, external_account_ids, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] regions: An array of region names to suppress (required)
        :param list[int] external_account_ids: An Array of the external accounts identified by external_account_id to suppress the signature or custom signature on (required)
        :param str reason: The reason for creating the suppression (required)
        :param list[int] signature_ids: An array of signatures identified by signature_id to suppress. Required if custom_signature_ids is blank.
        :param list[int] custom_signature_ids: An array of custom signatures identified by custom_signature_id to suppress. Required if signature_ids is blank.
        :param str resource: The resource string this suppression will suppress alerts for
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['regions', 'external_account_ids', 'reason', 'signature_ids', 'custom_signature_ids', 'resource']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppress_signature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'regions' is set
        if ('regions' not in params) or (params['regions'] is None):
            raise ValueError("Missing the required parameter `regions` when calling `suppress_signature`")
        # verify the required parameter 'external_account_ids' is set
        if ('external_account_ids' not in params) or (params['external_account_ids'] is None):
            raise ValueError("Missing the required parameter `external_account_ids` when calling `suppress_signature`")
        # verify the required parameter 'reason' is set
        if ('reason' not in params) or (params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `suppress_signature`")


        collection_formats = {}

        resource_path = '/api/v2/suppressions/signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'signature_ids' in params:
            form_params.append(('signature_ids', params['signature_ids']))
            collection_formats['signature_ids'] = 'csv'
        if 'custom_signature_ids' in params:
            form_params.append(('custom_signature_ids', params['custom_signature_ids']))
            collection_formats['custom_signature_ids'] = 'csv'
        if 'regions' in params:
            form_params.append(('regions', params['regions']))
            collection_formats['regions'] = 'csv'
        if 'external_account_ids' in params:
            form_params.append(('external_account_ids', params['external_account_ids']))
            collection_formats['external_account_ids'] = 'csv'
        if 'reason' in params:
            form_params.append(('reason', params['reason']))
        if 'resource' in params:
            form_params.append(('resource', params['resource']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suppression',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suppress_signature_from_alert(self, alert_id, reason, **kwargs):
        """
        A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/signatures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_signature_from_alert(alert_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int alert_id: The ID for the alert you want to create a suppression for (required)
        :param str reason: The reason for creating the suppression (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suppress_signature_from_alert_with_http_info(alert_id, reason, **kwargs)
        else:
            (data) = self.suppress_signature_from_alert_with_http_info(alert_id, reason, **kwargs)
            return data

    def suppress_signature_from_alert_with_http_info(self, alert_id, reason, **kwargs):
        """
        A successful call to this API creates a new signature suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/signatures.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_signature_from_alert_with_http_info(alert_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int alert_id: The ID for the alert you want to create a suppression for (required)
        :param str reason: The reason for creating the suppression (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_id', 'reason']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppress_signature_from_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_id' is set
        if ('alert_id' not in params) or (params['alert_id'] is None):
            raise ValueError("Missing the required parameter `alert_id` when calling `suppress_signature_from_alert`")
        # verify the required parameter 'reason' is set
        if ('reason' not in params) or (params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `suppress_signature_from_alert`")


        collection_formats = {}

        resource_path = '/api/v2/suppressions/alert/{alert_id}/signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'alert_id' in params:
            form_params.append(('alert_id', params['alert_id']))
        if 'reason' in params:
            form_params.append(('reason', params['reason']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suppression',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def suppress_unique_identifier_from_alert(self, alert_id, reason, **kwargs):
        """
        A successful call to this API creates a new unique identifier suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/unique_identifier.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_unique_identifier_from_alert(alert_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int alert_id: The ID for the alert you want to create a suppression for (required)
        :param str reason: The reason for creating the suppression (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.suppress_unique_identifier_from_alert_with_http_info(alert_id, reason, **kwargs)
        else:
            (data) = self.suppress_unique_identifier_from_alert_with_http_info(alert_id, reason, **kwargs)
            return data

    def suppress_unique_identifier_from_alert_with_http_info(self, alert_id, reason, **kwargs):
        """
        A successful call to this API creates a new unique identifier suppression based on the supplied alert_id. The body of the request must contain a json api compliant hash of attributes with type suppression/unique_identifier.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.suppress_unique_identifier_from_alert_with_http_info(alert_id, reason, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int alert_id: The ID for the alert you want to create a suppression for (required)
        :param str reason: The reason for creating the suppression (required)
        :return: Suppression
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_id', 'reason']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppress_unique_identifier_from_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_id' is set
        if ('alert_id' not in params) or (params['alert_id'] is None):
            raise ValueError("Missing the required parameter `alert_id` when calling `suppress_unique_identifier_from_alert`")
        # verify the required parameter 'reason' is set
        if ('reason' not in params) or (params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `suppress_unique_identifier_from_alert`")


        collection_formats = {}

        resource_path = '/api/v2/suppressions/alert/{alert_id}/unique_identifiers.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'alert_id' in params:
            form_params.append(('alert_id', params['alert_id']))
        if 'reason' in params:
            form_params.append(('reason', params['reason']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Suppression',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
