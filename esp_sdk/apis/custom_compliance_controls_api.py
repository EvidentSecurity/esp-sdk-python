# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CustomComplianceControlsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_custom_signature(self, custom_compliance_control_id, custom_signature_id, **kwargs):
        """
        Add a Custom Signature to a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_custom_signature(custom_compliance_control_id, custom_signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this custom signature belongs to (required)
        :param int custom_signature_id: The ID of the custom signature that belongs to this custom control (required)
        :param str include: Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
        :return: CustomSignature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_custom_signature_with_http_info(custom_compliance_control_id, custom_signature_id, **kwargs)
        else:
            (data) = self.add_custom_signature_with_http_info(custom_compliance_control_id, custom_signature_id, **kwargs)
            return data

    def add_custom_signature_with_http_info(self, custom_compliance_control_id, custom_signature_id, **kwargs):
        """
        Add a Custom Signature to a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_custom_signature_with_http_info(custom_compliance_control_id, custom_signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this custom signature belongs to (required)
        :param int custom_signature_id: The ID of the custom signature that belongs to this custom control (required)
        :param str include: Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
        :return: CustomSignature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_compliance_control_id', 'custom_signature_id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_custom_signature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_compliance_control_id' is set
        if ('custom_compliance_control_id' not in params) or (params['custom_compliance_control_id'] is None):
            raise ValueError("Missing the required parameter `custom_compliance_control_id` when calling `add_custom_signature`")
        # verify the required parameter 'custom_signature_id' is set
        if ('custom_signature_id' not in params) or (params['custom_signature_id'] is None):
            raise ValueError("Missing the required parameter `custom_signature_id` when calling `add_custom_signature`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{custom_compliance_control_id}/custom_signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'custom_compliance_control_id' in params:
            path_params['custom_compliance_control_id'] = params['custom_compliance_control_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'custom_signature_id' in params:
            form_params.append(('custom_signature_id', params['custom_signature_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomSignature',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_signature(self, custom_compliance_control_id, signature_id, **kwargs):
        """
        Add a Signature to a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_signature(custom_compliance_control_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this signature belongs to (required)
        :param int signature_id: The ID of the signature that belongs to this custom control (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_signature_with_http_info(custom_compliance_control_id, signature_id, **kwargs)
        else:
            (data) = self.add_signature_with_http_info(custom_compliance_control_id, signature_id, **kwargs)
            return data

    def add_signature_with_http_info(self, custom_compliance_control_id, signature_id, **kwargs):
        """
        Add a Signature to a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_signature_with_http_info(custom_compliance_control_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this signature belongs to (required)
        :param int signature_id: The ID of the signature that belongs to this custom control (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :return: Signature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_compliance_control_id', 'signature_id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_signature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_compliance_control_id' is set
        if ('custom_compliance_control_id' not in params) or (params['custom_compliance_control_id'] is None):
            raise ValueError("Missing the required parameter `custom_compliance_control_id` when calling `add_signature`")
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `add_signature`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{custom_compliance_control_id}/signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'custom_compliance_control_id' in params:
            path_params['custom_compliance_control_id'] = params['custom_compliance_control_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'signature_id' in params:
            form_params.append(('signature_id', params['signature_id']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Signature',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create(self, custom_compliance_domain_id, identifier, name, **kwargs):
        """
        Create a(n) Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(custom_compliance_domain_id, identifier, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_domain_id: The ID of the Custom Compliance Domain this custom control belongs to (required)
        :param str identifier: The identifier of this custom control (required)
        :param str name: Name (required)
        :param str include: Related objects that can be included in the response:  custom_compliance_standard, custom_compliance_domain, signatures, custom_signatures See Including Objects for more information.
        :param list[int] custom_signature_ids: An array of custom signatures identified by custom_signature_id that belong to this custom control
        :param str description: The description for this custom control
        :param int position: The position of this custom control within the custom domain
        :param list[int] signature_ids: An array of signatures identified by signature_id that belong to this custom control
        :return: CustomComplianceControl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(custom_compliance_domain_id, identifier, name, **kwargs)
        else:
            (data) = self.create_with_http_info(custom_compliance_domain_id, identifier, name, **kwargs)
            return data

    def create_with_http_info(self, custom_compliance_domain_id, identifier, name, **kwargs):
        """
        Create a(n) Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(custom_compliance_domain_id, identifier, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_domain_id: The ID of the Custom Compliance Domain this custom control belongs to (required)
        :param str identifier: The identifier of this custom control (required)
        :param str name: Name (required)
        :param str include: Related objects that can be included in the response:  custom_compliance_standard, custom_compliance_domain, signatures, custom_signatures See Including Objects for more information.
        :param list[int] custom_signature_ids: An array of custom signatures identified by custom_signature_id that belong to this custom control
        :param str description: The description for this custom control
        :param int position: The position of this custom control within the custom domain
        :param list[int] signature_ids: An array of signatures identified by signature_id that belong to this custom control
        :return: CustomComplianceControl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_compliance_domain_id', 'identifier', 'name', 'include', 'custom_signature_ids', 'description', 'position', 'signature_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_compliance_domain_id' is set
        if ('custom_compliance_domain_id' not in params) or (params['custom_compliance_domain_id'] is None):
            raise ValueError("Missing the required parameter `custom_compliance_domain_id` when calling `create`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `create`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'custom_compliance_domain_id' in params:
            form_params.append(('custom_compliance_domain_id', params['custom_compliance_domain_id']))
        if 'custom_signature_ids' in params:
            form_params.append(('custom_signature_ids', params['custom_signature_ids']))
            collection_formats['None'] = 'csv'
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'identifier' in params:
            form_params.append(('identifier', params['identifier']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'position' in params:
            form_params.append(('position', params['position']))
        if 'signature_ids' in params:
            form_params.append(('signature_ids', params['signature_ids']))
            collection_formats['None'] = 'csv'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomComplianceControl',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete(self, id, **kwargs):
        """
        Delete a(n) Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Custom Compliance Control ID (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_with_http_info(id, **kwargs)
            return data

    def delete_with_http_info(self, id, **kwargs):
        """
        Delete a(n) Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Custom Compliance Control ID (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Meta',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_custom_signatures(self, custom_compliance_control_id, **kwargs):
        """
        Get a list of Custom Signatures for a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_custom_signatures(custom_compliance_control_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this custom signature belongs to (required)
        :param str include: Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_custom_signatures_with_http_info(custom_compliance_control_id, **kwargs)
        else:
            (data) = self.list_custom_signatures_with_http_info(custom_compliance_control_id, **kwargs)
            return data

    def list_custom_signatures_with_http_info(self, custom_compliance_control_id, **kwargs):
        """
        Get a list of Custom Signatures for a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_custom_signatures_with_http_info(custom_compliance_control_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this custom signature belongs to (required)
        :param str include: Related objects that can be included in the response:  organization, teams, external_accounts, definitions, suppressions See Including Objects for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_compliance_control_id', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_custom_signatures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_compliance_control_id' is set
        if ('custom_compliance_control_id' not in params) or (params['custom_compliance_control_id'] is None):
            raise ValueError("Missing the required parameter `custom_compliance_control_id` when calling `list_custom_signatures`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{custom_compliance_control_id}/custom_signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'custom_compliance_control_id' in params:
            path_params['custom_compliance_control_id'] = params['custom_compliance_control_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_signatures(self, custom_compliance_control_id, **kwargs):
        """
        Get a list of Signatures for a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_signatures(custom_compliance_control_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this signature belongs to (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_signatures_with_http_info(custom_compliance_control_id, **kwargs)
        else:
            (data) = self.list_signatures_with_http_info(custom_compliance_control_id, **kwargs)
            return data

    def list_signatures_with_http_info(self, custom_compliance_control_id, **kwargs):
        """
        Get a list of Signatures for a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_signatures_with_http_info(custom_compliance_control_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this signature belongs to (required)
        :param str include: Related objects that can be included in the response:  service, suppressions See Including Objects for more information.
        :param str page: Page Number and Page Size.  Number is the page number of the collection to return, size is the number of items to return per page.
        :return: PaginatedCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_compliance_control_id', 'include', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_signatures" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_compliance_control_id' is set
        if ('custom_compliance_control_id' not in params) or (params['custom_compliance_control_id'] is None):
            raise ValueError("Missing the required parameter `custom_compliance_control_id` when calling `list_signatures`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{custom_compliance_control_id}/signatures.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'custom_compliance_control_id' in params:
            path_params['custom_compliance_control_id'] = params['custom_compliance_control_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'page' in params:
            form_params.append(('page', params['page']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaginatedCollection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_custom_signature(self, custom_compliance_control_id, custom_signature_id, **kwargs):
        """
        Remove a Custom Signature from a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_custom_signature(custom_compliance_control_id, custom_signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this custom signature belongs to (required)
        :param int custom_signature_id: The ID of the custom signature that belongs to this custom control (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_custom_signature_with_http_info(custom_compliance_control_id, custom_signature_id, **kwargs)
        else:
            (data) = self.remove_custom_signature_with_http_info(custom_compliance_control_id, custom_signature_id, **kwargs)
            return data

    def remove_custom_signature_with_http_info(self, custom_compliance_control_id, custom_signature_id, **kwargs):
        """
        Remove a Custom Signature from a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_custom_signature_with_http_info(custom_compliance_control_id, custom_signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this custom signature belongs to (required)
        :param int custom_signature_id: The ID of the custom signature that belongs to this custom control (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_compliance_control_id', 'custom_signature_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_custom_signature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_compliance_control_id' is set
        if ('custom_compliance_control_id' not in params) or (params['custom_compliance_control_id'] is None):
            raise ValueError("Missing the required parameter `custom_compliance_control_id` when calling `remove_custom_signature`")
        # verify the required parameter 'custom_signature_id' is set
        if ('custom_signature_id' not in params) or (params['custom_signature_id'] is None):
            raise ValueError("Missing the required parameter `custom_signature_id` when calling `remove_custom_signature`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{custom_compliance_control_id}/custom_signatures/{custom_signature_id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'custom_compliance_control_id' in params:
            path_params['custom_compliance_control_id'] = params['custom_compliance_control_id']
        if 'custom_signature_id' in params:
            path_params['custom_signature_id'] = params['custom_signature_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Meta',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_signature(self, custom_compliance_control_id, signature_id, **kwargs):
        """
        Remove a Signature from a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_signature(custom_compliance_control_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this signature belongs to (required)
        :param int signature_id: The ID of the signature that belongs to this custom control (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_signature_with_http_info(custom_compliance_control_id, signature_id, **kwargs)
        else:
            (data) = self.remove_signature_with_http_info(custom_compliance_control_id, signature_id, **kwargs)
            return data

    def remove_signature_with_http_info(self, custom_compliance_control_id, signature_id, **kwargs):
        """
        Remove a Signature from a Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_signature_with_http_info(custom_compliance_control_id, signature_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int custom_compliance_control_id: The ID of the Custom Compliance Control this signature belongs to (required)
        :param int signature_id: The ID of the signature that belongs to this custom control (required)
        :return: Meta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_compliance_control_id', 'signature_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_signature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_compliance_control_id' is set
        if ('custom_compliance_control_id' not in params) or (params['custom_compliance_control_id'] is None):
            raise ValueError("Missing the required parameter `custom_compliance_control_id` when calling `remove_signature`")
        # verify the required parameter 'signature_id' is set
        if ('signature_id' not in params) or (params['signature_id'] is None):
            raise ValueError("Missing the required parameter `signature_id` when calling `remove_signature`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{custom_compliance_control_id}/signatures/{signature_id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'custom_compliance_control_id' in params:
            path_params['custom_compliance_control_id'] = params['custom_compliance_control_id']
        if 'signature_id' in params:
            path_params['signature_id'] = params['signature_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Meta',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show(self, id, **kwargs):
        """
        Show a single Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Custom Compliance Control ID (required)
        :param str include: Related objects that can be included in the response:  custom_compliance_standard, custom_compliance_domain, signatures, custom_signatures See Including Objects for more information.
        :return: CustomComplianceControl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_with_http_info(id, **kwargs)
        else:
            (data) = self.show_with_http_info(id, **kwargs)
            return data

    def show_with_http_info(self, id, **kwargs):
        """
        Show a single Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Custom Compliance Control ID (required)
        :param str include: Related objects that can be included in the response:  custom_compliance_standard, custom_compliance_domain, signatures, custom_signatures See Including Objects for more information.
        :return: CustomComplianceControl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `show`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomComplianceControl',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, id, **kwargs):
        """
        Update a(n) Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Custom Compliance Control ID (required)
        :param str include: Related objects that can be included in the response:  custom_compliance_standard, custom_compliance_domain, signatures, custom_signatures See Including Objects for more information.
        :param int custom_compliance_domain_id: The ID of the Custom Compliance Domain this custom control belongs to
        :param list[int] custom_signature_ids: An array of custom signatures identified by custom_signature_id that belong to this custom control
        :param str description: The description for this custom control
        :param str identifier: The identifier of this custom control
        :param str name: Name
        :param int position: The position of this custom control within the custom domain
        :param list[int] signature_ids: An array of signatures identified by signature_id that belong to this custom control
        :return: CustomComplianceControl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(id, **kwargs)
        else:
            (data) = self.update_with_http_info(id, **kwargs)
            return data

    def update_with_http_info(self, id, **kwargs):
        """
        Update a(n) Custom Compliance Control
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Custom Compliance Control ID (required)
        :param str include: Related objects that can be included in the response:  custom_compliance_standard, custom_compliance_domain, signatures, custom_signatures See Including Objects for more information.
        :param int custom_compliance_domain_id: The ID of the Custom Compliance Domain this custom control belongs to
        :param list[int] custom_signature_ids: An array of custom signatures identified by custom_signature_id that belong to this custom control
        :param str description: The description for this custom control
        :param str identifier: The identifier of this custom control
        :param str name: Name
        :param int position: The position of this custom control within the custom domain
        :param list[int] signature_ids: An array of signatures identified by signature_id that belong to this custom control
        :return: CustomComplianceControl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include', 'custom_compliance_domain_id', 'custom_signature_ids', 'description', 'identifier', 'name', 'position', 'signature_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update`")


        collection_formats = {}

        resource_path = '/api/v2/custom_compliance_controls/{id}.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'custom_compliance_domain_id' in params:
            form_params.append(('custom_compliance_domain_id', params['custom_compliance_domain_id']))
        if 'custom_signature_ids' in params:
            form_params.append(('custom_signature_ids', params['custom_signature_ids']))
            collection_formats['None'] = 'csv'
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'identifier' in params:
            form_params.append(('identifier', params['identifier']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'position' in params:
            form_params.append(('position', params['position']))
        if 'signature_ids' in params:
            form_params.append(('signature_ids', params['signature_ids']))
            collection_formats['None'] = 'csv'

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomComplianceControl',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
