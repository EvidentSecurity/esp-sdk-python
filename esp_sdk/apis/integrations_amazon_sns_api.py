# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IntegrationsAmazonSNSApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create(self, arn, external_account_ids, external_id, name, topic, **kwargs):
        """
        Create an Amazon SNS Integration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(arn, external_account_ids, external_id, name, topic, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str arn: The role arn for accessing the SNS topic (required)
        :param list[int] external_account_ids: External accounts for integration (required)
        :param str external_id: The external ID for the IAM role (required)
        :param str name: Name of the integration (required)
        :param str topic: The SNS topic arn (required)
        :param str include: Related objects that can be included in the response:  integration See Including Objects for more information.
        :param bool all_high_risk: Send all high risk alerts
        :param bool all_low_risk: Send all low risk alerts
        :param bool all_medium_risk: Send all medium risk alerts
        :param list[int] custom_signature_ids: Custom signatures for integration
        :param bool send_updates: This feature enables the integration to send alerts when they are updated. When disabled, alerts will only be sent when they are initially created. When enabled, alerts will additionally be sent when a change is made such as the alert ending. An alert may end for multiple reasons.
        :param bool send_when_suppressed: Send notifications for suppressed alerts
        :param list[int] signature_ids: Signatures for integration
        :param list[str] statuses: Only send alerts that have the status in this list. Valid values are fail, warn, error, pass, info
        :return: IntegrationAmazonSns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(arn, external_account_ids, external_id, name, topic, **kwargs)
        else:
            (data) = self.create_with_http_info(arn, external_account_ids, external_id, name, topic, **kwargs)
            return data

    def create_with_http_info(self, arn, external_account_ids, external_id, name, topic, **kwargs):
        """
        Create an Amazon SNS Integration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(arn, external_account_ids, external_id, name, topic, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str arn: The role arn for accessing the SNS topic (required)
        :param list[int] external_account_ids: External accounts for integration (required)
        :param str external_id: The external ID for the IAM role (required)
        :param str name: Name of the integration (required)
        :param str topic: The SNS topic arn (required)
        :param str include: Related objects that can be included in the response:  integration See Including Objects for more information.
        :param bool all_high_risk: Send all high risk alerts
        :param bool all_low_risk: Send all low risk alerts
        :param bool all_medium_risk: Send all medium risk alerts
        :param list[int] custom_signature_ids: Custom signatures for integration
        :param bool send_updates: This feature enables the integration to send alerts when they are updated. When disabled, alerts will only be sent when they are initially created. When enabled, alerts will additionally be sent when a change is made such as the alert ending. An alert may end for multiple reasons.
        :param bool send_when_suppressed: Send notifications for suppressed alerts
        :param list[int] signature_ids: Signatures for integration
        :param list[str] statuses: Only send alerts that have the status in this list. Valid values are fail, warn, error, pass, info
        :return: IntegrationAmazonSns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arn', 'external_account_ids', 'external_id', 'name', 'topic', 'include', 'all_high_risk', 'all_low_risk', 'all_medium_risk', 'custom_signature_ids', 'send_updates', 'send_when_suppressed', 'signature_ids', 'statuses']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arn' is set
        if ('arn' not in params) or (params['arn'] is None):
            raise ValueError("Missing the required parameter `arn` when calling `create`")
        # verify the required parameter 'external_account_ids' is set
        if ('external_account_ids' not in params) or (params['external_account_ids'] is None):
            raise ValueError("Missing the required parameter `external_account_ids` when calling `create`")
        # verify the required parameter 'external_id' is set
        if ('external_id' not in params) or (params['external_id'] is None):
            raise ValueError("Missing the required parameter `external_id` when calling `create`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create`")
        # verify the required parameter 'topic' is set
        if ('topic' not in params) or (params['topic'] is None):
            raise ValueError("Missing the required parameter `topic` when calling `create`")


        collection_formats = {}

        resource_path = '/api/v2/integrations/amazon_sns.json_api'.replace('{format}', 'json_api')
        path_params = {}

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'all_high_risk' in params:
            form_params.append(('all_high_risk', params['all_high_risk']))
        if 'all_low_risk' in params:
            form_params.append(('all_low_risk', params['all_low_risk']))
        if 'all_medium_risk' in params:
            form_params.append(('all_medium_risk', params['all_medium_risk']))
        if 'arn' in params:
            form_params.append(('arn', params['arn']))
        if 'custom_signature_ids' in params:
            form_params.append(('custom_signature_ids', params['custom_signature_ids']))
            collection_formats['None'] = 'csv'
        if 'external_account_ids' in params:
            form_params.append(('external_account_ids', params['external_account_ids']))
            collection_formats['None'] = 'csv'
        if 'external_id' in params:
            form_params.append(('external_id', params['external_id']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'send_updates' in params:
            form_params.append(('send_updates', params['send_updates']))
        if 'send_when_suppressed' in params:
            form_params.append(('send_when_suppressed', params['send_when_suppressed']))
        if 'signature_ids' in params:
            form_params.append(('signature_ids', params['signature_ids']))
            collection_formats['None'] = 'csv'
        if 'statuses' in params:
            form_params.append(('statuses', params['statuses']))
            collection_formats['None'] = 'csv'
        if 'topic' in params:
            form_params.append(('topic', params['topic']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IntegrationAmazonSns',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def show(self, integration_id, **kwargs):
        """
        Show a single Amazon SNS Integration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show(integration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int integration_id: The ID of the integration (required)
        :param str include: Related objects that can be included in the response:  integration See Including Objects for more information.
        :return: IntegrationAmazonSns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.show_with_http_info(integration_id, **kwargs)
        else:
            (data) = self.show_with_http_info(integration_id, **kwargs)
            return data

    def show_with_http_info(self, integration_id, **kwargs):
        """
        Show a single Amazon SNS Integration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.show_with_http_info(integration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int integration_id: The ID of the integration (required)
        :param str include: Related objects that can be included in the response:  integration See Including Objects for more information.
        :return: IntegrationAmazonSns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params) or (params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `show`")


        collection_formats = {}

        resource_path = '/api/v2/integrations/{integration_id}/amazon_sns.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'integration_id' in params:
            path_params['integration_id'] = params['integration_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IntegrationAmazonSns',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, integration_id, **kwargs):
        """
        Update an Amazon SNS Integration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(integration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int integration_id: The ID of the integration (required)
        :param str include: Related objects that can be included in the response:  integration See Including Objects for more information.
        :param bool all_high_risk: Send all high risk alerts
        :param bool all_low_risk: Send all low risk alerts
        :param bool all_medium_risk: Send all medium risk alerts
        :param str arn: The role arn for accessing the SNS topic
        :param list[int] custom_signature_ids: Custom signatures for integration
        :param list[int] external_account_ids: External accounts for integration
        :param str external_id: The external ID for the IAM role
        :param str name: Name of the integration
        :param bool send_updates: This feature enables the integration to send alerts when they are updated. When disabled, alerts will only be sent when they are initially created. When enabled, alerts will additionally be sent when a change is made such as the alert ending. An alert may end for multiple reasons.
        :param bool send_when_suppressed: Send notifications for suppressed alerts
        :param list[int] signature_ids: Signatures for integration
        :param list[str] statuses: Only send alerts that have the status in this list. Valid values are fail, warn, error, pass, info
        :param str topic: The SNS topic arn
        :return: IntegrationAmazonSns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(integration_id, **kwargs)
        else:
            (data) = self.update_with_http_info(integration_id, **kwargs)
            return data

    def update_with_http_info(self, integration_id, **kwargs):
        """
        Update an Amazon SNS Integration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(integration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int integration_id: The ID of the integration (required)
        :param str include: Related objects that can be included in the response:  integration See Including Objects for more information.
        :param bool all_high_risk: Send all high risk alerts
        :param bool all_low_risk: Send all low risk alerts
        :param bool all_medium_risk: Send all medium risk alerts
        :param str arn: The role arn for accessing the SNS topic
        :param list[int] custom_signature_ids: Custom signatures for integration
        :param list[int] external_account_ids: External accounts for integration
        :param str external_id: The external ID for the IAM role
        :param str name: Name of the integration
        :param bool send_updates: This feature enables the integration to send alerts when they are updated. When disabled, alerts will only be sent when they are initially created. When enabled, alerts will additionally be sent when a change is made such as the alert ending. An alert may end for multiple reasons.
        :param bool send_when_suppressed: Send notifications for suppressed alerts
        :param list[int] signature_ids: Signatures for integration
        :param list[str] statuses: Only send alerts that have the status in this list. Valid values are fail, warn, error, pass, info
        :param str topic: The SNS topic arn
        :return: IntegrationAmazonSns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id', 'include', 'all_high_risk', 'all_low_risk', 'all_medium_risk', 'arn', 'custom_signature_ids', 'external_account_ids', 'external_id', 'name', 'send_updates', 'send_when_suppressed', 'signature_ids', 'statuses', 'topic']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params) or (params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `update`")


        collection_formats = {}

        resource_path = '/api/v2/integrations/{integration_id}/amazon_sns.json_api'.replace('{format}', 'json_api')
        path_params = {}
        if 'integration_id' in params:
            path_params['integration_id'] = params['integration_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'all_high_risk' in params:
            form_params.append(('all_high_risk', params['all_high_risk']))
        if 'all_low_risk' in params:
            form_params.append(('all_low_risk', params['all_low_risk']))
        if 'all_medium_risk' in params:
            form_params.append(('all_medium_risk', params['all_medium_risk']))
        if 'arn' in params:
            form_params.append(('arn', params['arn']))
        if 'custom_signature_ids' in params:
            form_params.append(('custom_signature_ids', params['custom_signature_ids']))
            collection_formats['None'] = 'csv'
        if 'external_account_ids' in params:
            form_params.append(('external_account_ids', params['external_account_ids']))
            collection_formats['None'] = 'csv'
        if 'external_id' in params:
            form_params.append(('external_id', params['external_id']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'send_updates' in params:
            form_params.append(('send_updates', params['send_updates']))
        if 'send_when_suppressed' in params:
            form_params.append(('send_when_suppressed', params['send_when_suppressed']))
        if 'signature_ids' in params:
            form_params.append(('signature_ids', params['signature_ids']))
            collection_formats['None'] = 'csv'
        if 'statuses' in params:
            form_params.append(('statuses', params['statuses']))
            collection_formats['None'] = 'csv'
        if 'topic' in params:
            form_params.append(('topic', params['topic']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IntegrationAmazonSns',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
