# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class CustomSignatureResultAlert(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, status=None, resource=None, metadata=None, tags=None, updated_at=None, external_account=None, external_account_id=None, region=None, region_id=None, custom_signature=None, custom_signature_id=None):
        """
        CustomSignatureResultAlert - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'status': 'str',
            'resource': 'str',
            'metadata': 'object',
            'tags': 'list[object]',
            'updated_at': 'datetime',
            'external_account': 'ExternalAccount',
            'external_account_id': 'int',
            'region': 'Region',
            'region_id': 'int',
            'custom_signature': 'CustomSignature',
            'custom_signature_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'status': 'status',
            'resource': 'resource',
            'metadata': 'metadata',
            'tags': 'tags',
            'updated_at': 'updated_at',
            'external_account': 'external_account',
            'external_account_id': 'external_account_id',
            'region': 'region',
            'region_id': 'region_id',
            'custom_signature': 'custom_signature',
            'custom_signature_id': 'custom_signature_id'
        }

        self._id = id
        self._created_at = created_at
        self._status = status
        self._resource = resource
        self._metadata = metadata
        self._tags = tags
        self._updated_at = updated_at
        self._external_account = external_account
        self._external_account_id = external_account_id
        self._region = region
        self._region_id = region_id
        self._custom_signature = custom_signature
        self._custom_signature_id = custom_signature_id

    @property
    def id(self):
        """
        Gets the id of this CustomSignatureResultAlert.
        Unique ID

        :return: The id of this CustomSignatureResultAlert.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomSignatureResultAlert.
        Unique ID

        :param id: The id of this CustomSignatureResultAlert.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this CustomSignatureResultAlert.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this CustomSignatureResultAlert.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CustomSignatureResultAlert.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this CustomSignatureResultAlert.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def status(self):
        """
        Gets the status of this CustomSignatureResultAlert.
        Status of the alert. Valid values are fail, warn, error, pass, info

        :return: The status of this CustomSignatureResultAlert.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CustomSignatureResultAlert.
        Status of the alert. Valid values are fail, warn, error, pass, info

        :param status: The status of this CustomSignatureResultAlert.
        :type: str
        """

        self._status = status

    @property
    def resource(self):
        """
        Gets the resource of this CustomSignatureResultAlert.
        Resource identifier in Amazon

        :return: The resource of this CustomSignatureResultAlert.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this CustomSignatureResultAlert.
        Resource identifier in Amazon

        :param resource: The resource of this CustomSignatureResultAlert.
        :type: str
        """

        self._resource = resource

    @property
    def metadata(self):
        """
        Gets the metadata of this CustomSignatureResultAlert.
        Metadata associated with the result

        :return: The metadata of this CustomSignatureResultAlert.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this CustomSignatureResultAlert.
        Metadata associated with the result

        :param metadata: The metadata of this CustomSignatureResultAlert.
        :type: object
        """

        self._metadata = metadata

    @property
    def tags(self):
        """
        Gets the tags of this CustomSignatureResultAlert.
        Tags associated with the result

        :return: The tags of this CustomSignatureResultAlert.
        :rtype: list[object]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this CustomSignatureResultAlert.
        Tags associated with the result

        :param tags: The tags of this CustomSignatureResultAlert.
        :type: list[object]
        """

        self._tags = tags

    @property
    def updated_at(self):
        """
        Gets the updated_at of this CustomSignatureResultAlert.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this CustomSignatureResultAlert.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this CustomSignatureResultAlert.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this CustomSignatureResultAlert.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def external_account(self):
        """
        Gets the external_account of this CustomSignatureResultAlert.
        Associated External Account

        :return: The external_account of this CustomSignatureResultAlert.
        :rtype: ExternalAccount
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """
        Sets the external_account of this CustomSignatureResultAlert.
        Associated External Account

        :param external_account: The external_account of this CustomSignatureResultAlert.
        :type: ExternalAccount
        """

        self._external_account = external_account

    @property
    def external_account_id(self):
        """
        Gets the external_account_id of this CustomSignatureResultAlert.
        Associated External Account ID

        :return: The external_account_id of this CustomSignatureResultAlert.
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """
        Sets the external_account_id of this CustomSignatureResultAlert.
        Associated External Account ID

        :param external_account_id: The external_account_id of this CustomSignatureResultAlert.
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def region(self):
        """
        Gets the region of this CustomSignatureResultAlert.
        Associated Region

        :return: The region of this CustomSignatureResultAlert.
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this CustomSignatureResultAlert.
        Associated Region

        :param region: The region of this CustomSignatureResultAlert.
        :type: Region
        """

        self._region = region

    @property
    def region_id(self):
        """
        Gets the region_id of this CustomSignatureResultAlert.
        Associated Region ID

        :return: The region_id of this CustomSignatureResultAlert.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """
        Sets the region_id of this CustomSignatureResultAlert.
        Associated Region ID

        :param region_id: The region_id of this CustomSignatureResultAlert.
        :type: int
        """

        self._region_id = region_id

    @property
    def custom_signature(self):
        """
        Gets the custom_signature of this CustomSignatureResultAlert.
        Associated Custom Signature

        :return: The custom_signature of this CustomSignatureResultAlert.
        :rtype: CustomSignature
        """
        return self._custom_signature

    @custom_signature.setter
    def custom_signature(self, custom_signature):
        """
        Sets the custom_signature of this CustomSignatureResultAlert.
        Associated Custom Signature

        :param custom_signature: The custom_signature of this CustomSignatureResultAlert.
        :type: CustomSignature
        """

        self._custom_signature = custom_signature

    @property
    def custom_signature_id(self):
        """
        Gets the custom_signature_id of this CustomSignatureResultAlert.
        Associated Custom Signature ID

        :return: The custom_signature_id of this CustomSignatureResultAlert.
        :rtype: int
        """
        return self._custom_signature_id

    @custom_signature_id.setter
    def custom_signature_id(self, custom_signature_id):
        """
        Sets the custom_signature_id of this CustomSignatureResultAlert.
        Associated Custom Signature ID

        :param custom_signature_id: The custom_signature_id of this CustomSignatureResultAlert.
        :type: int
        """

        self._custom_signature_id = custom_signature_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomSignatureResultAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
