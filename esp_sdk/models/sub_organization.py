# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class SubOrganization(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, created_at=None, updated_at=None, external_accounts=None, external_account_ids=None, organization=None, organization_id=None, teams=None, team_ids=None):
        """
        SubOrganization - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'external_accounts': 'list[ExternalAccount]',
            'external_account_ids': 'list[int]',
            'organization': 'Organization',
            'organization_id': 'int',
            'teams': 'list[Team]',
            'team_ids': 'list[int]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'external_accounts': 'external_accounts',
            'external_account_ids': 'external_account_ids',
            'organization': 'organization',
            'organization_id': 'organization_id',
            'teams': 'teams',
            'team_ids': 'team_ids'
        }

        self._id = id
        self._name = name
        self._created_at = created_at
        self._updated_at = updated_at
        self._external_accounts = external_accounts
        self._external_account_ids = external_account_ids
        self._organization = organization
        self._organization_id = organization_id
        self._teams = teams
        self._team_ids = team_ids

    @property
    def id(self):
        """
        Gets the id of this SubOrganization.
        Unique ID

        :return: The id of this SubOrganization.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SubOrganization.
        Unique ID

        :param id: The id of this SubOrganization.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this SubOrganization.
        Name of the sub organization

        :return: The name of this SubOrganization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SubOrganization.
        Name of the sub organization

        :param name: The name of this SubOrganization.
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """
        Gets the created_at of this SubOrganization.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this SubOrganization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SubOrganization.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this SubOrganization.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this SubOrganization.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this SubOrganization.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this SubOrganization.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this SubOrganization.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def external_accounts(self):
        """
        Gets the external_accounts of this SubOrganization.
        Associated External Accounts

        :return: The external_accounts of this SubOrganization.
        :rtype: list[ExternalAccount]
        """
        return self._external_accounts

    @external_accounts.setter
    def external_accounts(self, external_accounts):
        """
        Sets the external_accounts of this SubOrganization.
        Associated External Accounts

        :param external_accounts: The external_accounts of this SubOrganization.
        :type: list[ExternalAccount]
        """

        self._external_accounts = external_accounts

    @property
    def external_account_ids(self):
        """
        Gets the external_account_ids of this SubOrganization.
        Associated External Accounts IDs

        :return: The external_account_ids of this SubOrganization.
        :rtype: list[int]
        """
        return self._external_account_ids

    @external_account_ids.setter
    def external_account_ids(self, external_account_ids):
        """
        Sets the external_account_ids of this SubOrganization.
        Associated External Accounts IDs

        :param external_account_ids: The external_account_ids of this SubOrganization.
        :type: list[int]
        """

        self._external_account_ids = external_account_ids

    @property
    def organization(self):
        """
        Gets the organization of this SubOrganization.
        Associated Organization

        :return: The organization of this SubOrganization.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this SubOrganization.
        Associated Organization

        :param organization: The organization of this SubOrganization.
        :type: Organization
        """

        self._organization = organization

    @property
    def organization_id(self):
        """
        Gets the organization_id of this SubOrganization.
        Associated Organization ID

        :return: The organization_id of this SubOrganization.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this SubOrganization.
        Associated Organization ID

        :param organization_id: The organization_id of this SubOrganization.
        :type: int
        """

        self._organization_id = organization_id

    @property
    def teams(self):
        """
        Gets the teams of this SubOrganization.
        Associated Teams

        :return: The teams of this SubOrganization.
        :rtype: list[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """
        Sets the teams of this SubOrganization.
        Associated Teams

        :param teams: The teams of this SubOrganization.
        :type: list[Team]
        """

        self._teams = teams

    @property
    def team_ids(self):
        """
        Gets the team_ids of this SubOrganization.
        Associated Teams IDs

        :return: The team_ids of this SubOrganization.
        :rtype: list[int]
        """
        return self._team_ids

    @team_ids.setter
    def team_ids(self, team_ids):
        """
        Sets the team_ids of this SubOrganization.
        Associated Teams IDs

        :param team_ids: The team_ids of this SubOrganization.
        :type: list[int]
        """

        self._team_ids = team_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SubOrganization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
