# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class Integration(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, updated_at=None, state=None, statuses=None, name=None, all_high_risk=None, all_medium_risk=None, all_low_risk=None, send_updates=None, error_messages=None, last_throttled_at=None, send_when_suppressed=None, organization=None, organization_id=None, creator=None, creator_id=None, service=None, service_id=None, external_accounts=None, external_account_ids=None, signatures=None, signature_ids=None, custom_signatures=None, custom_signature_ids=None):
        """
        Integration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'state': 'str',
            'statuses': 'list[str]',
            'name': 'str',
            'all_high_risk': 'bool',
            'all_medium_risk': 'bool',
            'all_low_risk': 'bool',
            'send_updates': 'bool',
            'error_messages': 'list[str]',
            'last_throttled_at': 'datetime',
            'send_when_suppressed': 'bool',
            'organization': 'Organization',
            'organization_id': 'int',
            'creator': 'User',
            'creator_id': 'int',
            'service': 'Service',
            'service_id': 'int',
            'external_accounts': 'list[ExternalAccount]',
            'external_account_ids': 'list[int]',
            'signatures': 'list[Signature]',
            'signature_ids': 'list[int]',
            'custom_signatures': 'list[CustomSignature]',
            'custom_signature_ids': 'list[int]'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'state': 'state',
            'statuses': 'statuses',
            'name': 'name',
            'all_high_risk': 'all_high_risk',
            'all_medium_risk': 'all_medium_risk',
            'all_low_risk': 'all_low_risk',
            'send_updates': 'send_updates',
            'error_messages': 'error_messages',
            'last_throttled_at': 'last_throttled_at',
            'send_when_suppressed': 'send_when_suppressed',
            'organization': 'organization',
            'organization_id': 'organization_id',
            'creator': 'creator',
            'creator_id': 'creator_id',
            'service': 'service',
            'service_id': 'service_id',
            'external_accounts': 'external_accounts',
            'external_account_ids': 'external_account_ids',
            'signatures': 'signatures',
            'signature_ids': 'signature_ids',
            'custom_signatures': 'custom_signatures',
            'custom_signature_ids': 'custom_signature_ids'
        }

        self._id = id
        self._created_at = created_at
        self._updated_at = updated_at
        self._state = state
        self._statuses = statuses
        self._name = name
        self._all_high_risk = all_high_risk
        self._all_medium_risk = all_medium_risk
        self._all_low_risk = all_low_risk
        self._send_updates = send_updates
        self._error_messages = error_messages
        self._last_throttled_at = last_throttled_at
        self._send_when_suppressed = send_when_suppressed
        self._organization = organization
        self._organization_id = organization_id
        self._creator = creator
        self._creator_id = creator_id
        self._service = service
        self._service_id = service_id
        self._external_accounts = external_accounts
        self._external_account_ids = external_account_ids
        self._signatures = signatures
        self._signature_ids = signature_ids
        self._custom_signatures = custom_signatures
        self._custom_signature_ids = custom_signature_ids

    @property
    def id(self):
        """
        Gets the id of this Integration.
        Unique ID

        :return: The id of this Integration.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Integration.
        Unique ID

        :param id: The id of this Integration.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this Integration.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this Integration.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Integration.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this Integration.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Integration.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this Integration.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Integration.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this Integration.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def state(self):
        """
        Gets the state of this Integration.
        The state the integration is in. Valid values are setup, active, error, disabled

        :return: The state of this Integration.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Integration.
        The state the integration is in. Valid values are setup, active, error, disabled

        :param state: The state of this Integration.
        :type: str
        """

        self._state = state

    @property
    def statuses(self):
        """
        Gets the statuses of this Integration.
        Only send alerts that have the status in this list. Valid values are fail, warn, error, pass, info

        :return: The statuses of this Integration.
        :rtype: list[str]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """
        Sets the statuses of this Integration.
        Only send alerts that have the status in this list. Valid values are fail, warn, error, pass, info

        :param statuses: The statuses of this Integration.
        :type: list[str]
        """

        self._statuses = statuses

    @property
    def name(self):
        """
        Gets the name of this Integration.
        Name of the integration

        :return: The name of this Integration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Integration.
        Name of the integration

        :param name: The name of this Integration.
        :type: str
        """

        self._name = name

    @property
    def all_high_risk(self):
        """
        Gets the all_high_risk of this Integration.
        Send all high risk alerts

        :return: The all_high_risk of this Integration.
        :rtype: bool
        """
        return self._all_high_risk

    @all_high_risk.setter
    def all_high_risk(self, all_high_risk):
        """
        Sets the all_high_risk of this Integration.
        Send all high risk alerts

        :param all_high_risk: The all_high_risk of this Integration.
        :type: bool
        """

        self._all_high_risk = all_high_risk

    @property
    def all_medium_risk(self):
        """
        Gets the all_medium_risk of this Integration.
        Send all medium risk alerts

        :return: The all_medium_risk of this Integration.
        :rtype: bool
        """
        return self._all_medium_risk

    @all_medium_risk.setter
    def all_medium_risk(self, all_medium_risk):
        """
        Sets the all_medium_risk of this Integration.
        Send all medium risk alerts

        :param all_medium_risk: The all_medium_risk of this Integration.
        :type: bool
        """

        self._all_medium_risk = all_medium_risk

    @property
    def all_low_risk(self):
        """
        Gets the all_low_risk of this Integration.
        Send all low risk alerts

        :return: The all_low_risk of this Integration.
        :rtype: bool
        """
        return self._all_low_risk

    @all_low_risk.setter
    def all_low_risk(self, all_low_risk):
        """
        Sets the all_low_risk of this Integration.
        Send all low risk alerts

        :param all_low_risk: The all_low_risk of this Integration.
        :type: bool
        """

        self._all_low_risk = all_low_risk

    @property
    def send_updates(self):
        """
        Gets the send_updates of this Integration.
        This feature enables the integration to send alerts when they are updated. When disabled, alerts will only be sent when they are initially created. When enabled, alerts will additionally be sent when a change is made such as the alert ending. An alert may end for multiple reasons.

        :return: The send_updates of this Integration.
        :rtype: bool
        """
        return self._send_updates

    @send_updates.setter
    def send_updates(self, send_updates):
        """
        Sets the send_updates of this Integration.
        This feature enables the integration to send alerts when they are updated. When disabled, alerts will only be sent when they are initially created. When enabled, alerts will additionally be sent when a change is made such as the alert ending. An alert may end for multiple reasons.

        :param send_updates: The send_updates of this Integration.
        :type: bool
        """

        self._send_updates = send_updates

    @property
    def error_messages(self):
        """
        Gets the error_messages of this Integration.
        Array of error messages

        :return: The error_messages of this Integration.
        :rtype: list[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """
        Sets the error_messages of this Integration.
        Array of error messages

        :param error_messages: The error_messages of this Integration.
        :type: list[str]
        """

        self._error_messages = error_messages

    @property
    def last_throttled_at(self):
        """
        Gets the last_throttled_at of this Integration.
        The time at which this integration was last throttled.

        :return: The last_throttled_at of this Integration.
        :rtype: datetime
        """
        return self._last_throttled_at

    @last_throttled_at.setter
    def last_throttled_at(self, last_throttled_at):
        """
        Sets the last_throttled_at of this Integration.
        The time at which this integration was last throttled.

        :param last_throttled_at: The last_throttled_at of this Integration.
        :type: datetime
        """

        self._last_throttled_at = last_throttled_at

    @property
    def send_when_suppressed(self):
        """
        Gets the send_when_suppressed of this Integration.
        Send notifications for suppressed alerts

        :return: The send_when_suppressed of this Integration.
        :rtype: bool
        """
        return self._send_when_suppressed

    @send_when_suppressed.setter
    def send_when_suppressed(self, send_when_suppressed):
        """
        Sets the send_when_suppressed of this Integration.
        Send notifications for suppressed alerts

        :param send_when_suppressed: The send_when_suppressed of this Integration.
        :type: bool
        """

        self._send_when_suppressed = send_when_suppressed

    @property
    def organization(self):
        """
        Gets the organization of this Integration.
        Associated Organization

        :return: The organization of this Integration.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this Integration.
        Associated Organization

        :param organization: The organization of this Integration.
        :type: Organization
        """

        self._organization = organization

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Integration.
        Associated Organization ID

        :return: The organization_id of this Integration.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Integration.
        Associated Organization ID

        :param organization_id: The organization_id of this Integration.
        :type: int
        """

        self._organization_id = organization_id

    @property
    def creator(self):
        """
        Gets the creator of this Integration.
        Associated Creator

        :return: The creator of this Integration.
        :rtype: User
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this Integration.
        Associated Creator

        :param creator: The creator of this Integration.
        :type: User
        """

        self._creator = creator

    @property
    def creator_id(self):
        """
        Gets the creator_id of this Integration.
        Associated Creator ID

        :return: The creator_id of this Integration.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """
        Sets the creator_id of this Integration.
        Associated Creator ID

        :param creator_id: The creator_id of this Integration.
        :type: int
        """

        self._creator_id = creator_id

    @property
    def service(self):
        """
        Gets the service of this Integration.
        Associated Service

        :return: The service of this Integration.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """
        Sets the service of this Integration.
        Associated Service

        :param service: The service of this Integration.
        :type: Service
        """

        self._service = service

    @property
    def service_id(self):
        """
        Gets the service_id of this Integration.
        Associated Service ID

        :return: The service_id of this Integration.
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """
        Sets the service_id of this Integration.
        Associated Service ID

        :param service_id: The service_id of this Integration.
        :type: int
        """

        self._service_id = service_id

    @property
    def external_accounts(self):
        """
        Gets the external_accounts of this Integration.
        Associated External Accounts

        :return: The external_accounts of this Integration.
        :rtype: list[ExternalAccount]
        """
        return self._external_accounts

    @external_accounts.setter
    def external_accounts(self, external_accounts):
        """
        Sets the external_accounts of this Integration.
        Associated External Accounts

        :param external_accounts: The external_accounts of this Integration.
        :type: list[ExternalAccount]
        """

        self._external_accounts = external_accounts

    @property
    def external_account_ids(self):
        """
        Gets the external_account_ids of this Integration.
        Associated External Accounts IDs

        :return: The external_account_ids of this Integration.
        :rtype: list[int]
        """
        return self._external_account_ids

    @external_account_ids.setter
    def external_account_ids(self, external_account_ids):
        """
        Sets the external_account_ids of this Integration.
        Associated External Accounts IDs

        :param external_account_ids: The external_account_ids of this Integration.
        :type: list[int]
        """

        self._external_account_ids = external_account_ids

    @property
    def signatures(self):
        """
        Gets the signatures of this Integration.
        Associated Signatures

        :return: The signatures of this Integration.
        :rtype: list[Signature]
        """
        return self._signatures

    @signatures.setter
    def signatures(self, signatures):
        """
        Sets the signatures of this Integration.
        Associated Signatures

        :param signatures: The signatures of this Integration.
        :type: list[Signature]
        """

        self._signatures = signatures

    @property
    def signature_ids(self):
        """
        Gets the signature_ids of this Integration.
        Associated Signatures IDs

        :return: The signature_ids of this Integration.
        :rtype: list[int]
        """
        return self._signature_ids

    @signature_ids.setter
    def signature_ids(self, signature_ids):
        """
        Sets the signature_ids of this Integration.
        Associated Signatures IDs

        :param signature_ids: The signature_ids of this Integration.
        :type: list[int]
        """

        self._signature_ids = signature_ids

    @property
    def custom_signatures(self):
        """
        Gets the custom_signatures of this Integration.
        Associated Custom Signatures

        :return: The custom_signatures of this Integration.
        :rtype: list[CustomSignature]
        """
        return self._custom_signatures

    @custom_signatures.setter
    def custom_signatures(self, custom_signatures):
        """
        Sets the custom_signatures of this Integration.
        Associated Custom Signatures

        :param custom_signatures: The custom_signatures of this Integration.
        :type: list[CustomSignature]
        """

        self._custom_signatures = custom_signatures

    @property
    def custom_signature_ids(self):
        """
        Gets the custom_signature_ids of this Integration.
        Associated Custom Signatures IDs

        :return: The custom_signature_ids of this Integration.
        :rtype: list[int]
        """
        return self._custom_signature_ids

    @custom_signature_ids.setter
    def custom_signature_ids(self, custom_signature_ids):
        """
        Sets the custom_signature_ids of this Integration.
        Associated Custom Signatures IDs

        :param custom_signature_ids: The custom_signature_ids of this Integration.
        :type: list[int]
        """

        self._custom_signature_ids = custom_signature_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Integration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
