# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ApiKey(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, access_id=None, name=None, last_used_at=None, created_at=None, updated_at=None, secret_key=None, user=None, user_id=None):
        """
        ApiKey - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'access_id': 'str',
            'name': 'str',
            'last_used_at': 'datetime',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'secret_key': 'str',
            'user': 'User',
            'user_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'access_id': 'access_id',
            'name': 'name',
            'last_used_at': 'last_used_at',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'secret_key': 'secret_key',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._id = id
        self._access_id = access_id
        self._name = name
        self._last_used_at = last_used_at
        self._created_at = created_at
        self._updated_at = updated_at
        self._secret_key = secret_key
        self._user = user
        self._user_id = user_id

    @property
    def id(self):
        """
        Gets the id of this ApiKey.
        Unique ID

        :return: The id of this ApiKey.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ApiKey.
        Unique ID

        :param id: The id of this ApiKey.
        :type: int
        """

        self._id = id

    @property
    def access_id(self):
        """
        Gets the access_id of this ApiKey.
        Access ID

        :return: The access_id of this ApiKey.
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """
        Sets the access_id of this ApiKey.
        Access ID

        :param access_id: The access_id of this ApiKey.
        :type: str
        """

        self._access_id = access_id

    @property
    def name(self):
        """
        Gets the name of this ApiKey.
        The name of the API Key

        :return: The name of this ApiKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiKey.
        The name of the API Key

        :param name: The name of this ApiKey.
        :type: str
        """

        self._name = name

    @property
    def last_used_at(self):
        """
        Gets the last_used_at of this ApiKey.
        ISO 8601 timestamp when the key was last used

        :return: The last_used_at of this ApiKey.
        :rtype: datetime
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at):
        """
        Sets the last_used_at of this ApiKey.
        ISO 8601 timestamp when the key was last used

        :param last_used_at: The last_used_at of this ApiKey.
        :type: datetime
        """

        self._last_used_at = last_used_at

    @property
    def created_at(self):
        """
        Gets the created_at of this ApiKey.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this ApiKey.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ApiKey.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this ApiKey.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ApiKey.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this ApiKey.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ApiKey.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this ApiKey.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def secret_key(self):
        """
        Gets the secret_key of this ApiKey.
        Secret Key - This will only be returned once when the key is first created.

        :return: The secret_key of this ApiKey.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """
        Sets the secret_key of this ApiKey.
        Secret Key - This will only be returned once when the key is first created.

        :param secret_key: The secret_key of this ApiKey.
        :type: str
        """

        self._secret_key = secret_key

    @property
    def user(self):
        """
        Gets the user of this ApiKey.
        Associated User

        :return: The user of this ApiKey.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ApiKey.
        Associated User

        :param user: The user of this ApiKey.
        :type: User
        """

        self._user = user

    @property
    def user_id(self):
        """
        Gets the user_id of this ApiKey.
        Associated User ID

        :return: The user_id of this ApiKey.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ApiKey.
        Associated User ID

        :param user_id: The user_id of this ApiKey.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
