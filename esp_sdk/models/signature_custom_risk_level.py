# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class SignatureCustomRiskLevel(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, updated_at=None, risk_level=None, external_account=None, external_account_id=None, signature=None, signature_id=None, errors=None):
        """
        SignatureCustomRiskLevel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'risk_level': 'str',
            'external_account': 'ExternalAccount',
            'external_account_id': 'int',
            'signature': 'Signature',
            'signature_id': 'int',
            'errors': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'risk_level': 'risk_level',
            'external_account': 'external_account',
            'external_account_id': 'external_account_id',
            'signature': 'signature',
            'signature_id': 'signature_id',
            'errors': 'errors'
        }

        self._id = id
        self._created_at = created_at
        self._updated_at = updated_at
        self._risk_level = risk_level
        self._external_account = external_account
        self._external_account_id = external_account_id
        self._signature = signature
        self._signature_id = signature_id
        self._errors = errors

    @property
    def id(self):
        """
        Gets the id of this SignatureCustomRiskLevel.
        Unique ID

        :return: The id of this SignatureCustomRiskLevel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SignatureCustomRiskLevel.
        Unique ID

        :param id: The id of this SignatureCustomRiskLevel.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this SignatureCustomRiskLevel.

        :return: The created_at of this SignatureCustomRiskLevel.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SignatureCustomRiskLevel.

        :param created_at: The created_at of this SignatureCustomRiskLevel.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this SignatureCustomRiskLevel.

        :return: The updated_at of this SignatureCustomRiskLevel.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this SignatureCustomRiskLevel.

        :param updated_at: The updated_at of this SignatureCustomRiskLevel.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def risk_level(self):
        """
        Gets the risk_level of this SignatureCustomRiskLevel.

        :return: The risk_level of this SignatureCustomRiskLevel.
        :rtype: str
        """
        return self._risk_level

    @risk_level.setter
    def risk_level(self, risk_level):
        """
        Sets the risk_level of this SignatureCustomRiskLevel.

        :param risk_level: The risk_level of this SignatureCustomRiskLevel.
        :type: str
        """

        self._risk_level = risk_level

    @property
    def external_account(self):
        """
        Gets the external_account of this SignatureCustomRiskLevel.
        Associated External Account

        :return: The external_account of this SignatureCustomRiskLevel.
        :rtype: ExternalAccount
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """
        Sets the external_account of this SignatureCustomRiskLevel.
        Associated External Account

        :param external_account: The external_account of this SignatureCustomRiskLevel.
        :type: ExternalAccount
        """

        self._external_account = external_account

    @property
    def external_account_id(self):
        """
        Gets the external_account_id of this SignatureCustomRiskLevel.
        Associated External Account Id

        :return: The external_account_id of this SignatureCustomRiskLevel.
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """
        Sets the external_account_id of this SignatureCustomRiskLevel.
        Associated External Account Id

        :param external_account_id: The external_account_id of this SignatureCustomRiskLevel.
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def signature(self):
        """
        Gets the signature of this SignatureCustomRiskLevel.
        Associated Signature

        :return: The signature of this SignatureCustomRiskLevel.
        :rtype: Signature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """
        Sets the signature of this SignatureCustomRiskLevel.
        Associated Signature

        :param signature: The signature of this SignatureCustomRiskLevel.
        :type: Signature
        """

        self._signature = signature

    @property
    def signature_id(self):
        """
        Gets the signature_id of this SignatureCustomRiskLevel.
        Associated Signature Id

        :return: The signature_id of this SignatureCustomRiskLevel.
        :rtype: int
        """
        return self._signature_id

    @signature_id.setter
    def signature_id(self, signature_id):
        """
        Sets the signature_id of this SignatureCustomRiskLevel.
        Associated Signature Id

        :param signature_id: The signature_id of this SignatureCustomRiskLevel.
        :type: int
        """

        self._signature_id = signature_id

    @property
    def errors(self):
        """
        Gets the errors of this SignatureCustomRiskLevel.
        Array of error messages if the request failed

        :return: The errors of this SignatureCustomRiskLevel.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this SignatureCustomRiskLevel.
        Array of error messages if the request failed

        :param errors: The errors of this SignatureCustomRiskLevel.
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SignatureCustomRiskLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
