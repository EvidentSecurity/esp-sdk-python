# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ComplianceStandard(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, name=None, description=None, updated_at=None, compliance_domains=None, compliance_domain_ids=None, compliance_controls=None, compliance_control_ids=None, errors=None):
        """
        ComplianceStandard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'name': 'str',
            'description': 'str',
            'updated_at': 'datetime',
            'compliance_domains': 'list[ComplianceDomain]',
            'compliance_domain_ids': 'list[int]',
            'compliance_controls': 'list[ComplianceControl]',
            'compliance_control_ids': 'list[int]',
            'errors': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'name': 'name',
            'description': 'description',
            'updated_at': 'updated_at',
            'compliance_domains': 'compliance_domains',
            'compliance_domain_ids': 'compliance_domain_ids',
            'compliance_controls': 'compliance_controls',
            'compliance_control_ids': 'compliance_control_ids',
            'errors': 'errors'
        }

        self._id = id
        self._created_at = created_at
        self._name = name
        self._description = description
        self._updated_at = updated_at
        self._compliance_domains = compliance_domains
        self._compliance_domain_ids = compliance_domain_ids
        self._compliance_controls = compliance_controls
        self._compliance_control_ids = compliance_control_ids
        self._errors = errors

    @property
    def id(self):
        """
        Gets the id of this ComplianceStandard.
        Unique ID

        :return: The id of this ComplianceStandard.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ComplianceStandard.
        Unique ID

        :param id: The id of this ComplianceStandard.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this ComplianceStandard.
        Created At

        :return: The created_at of this ComplianceStandard.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ComplianceStandard.
        Created At

        :param created_at: The created_at of this ComplianceStandard.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def name(self):
        """
        Gets the name of this ComplianceStandard.
        Name

        :return: The name of this ComplianceStandard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ComplianceStandard.
        Name

        :param name: The name of this ComplianceStandard.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ComplianceStandard.
        The description for this Compliance Standard

        :return: The description of this ComplianceStandard.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ComplianceStandard.
        The description for this Compliance Standard

        :param description: The description of this ComplianceStandard.
        :type: str
        """

        self._description = description

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ComplianceStandard.
        Updated At

        :return: The updated_at of this ComplianceStandard.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ComplianceStandard.
        Updated At

        :param updated_at: The updated_at of this ComplianceStandard.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def compliance_domains(self):
        """
        Gets the compliance_domains of this ComplianceStandard.
        Associated Compliance Domains

        :return: The compliance_domains of this ComplianceStandard.
        :rtype: list[ComplianceDomain]
        """
        return self._compliance_domains

    @compliance_domains.setter
    def compliance_domains(self, compliance_domains):
        """
        Sets the compliance_domains of this ComplianceStandard.
        Associated Compliance Domains

        :param compliance_domains: The compliance_domains of this ComplianceStandard.
        :type: list[ComplianceDomain]
        """

        self._compliance_domains = compliance_domains

    @property
    def compliance_domain_ids(self):
        """
        Gets the compliance_domain_ids of this ComplianceStandard.
        Associated Compliance Domains Ids

        :return: The compliance_domain_ids of this ComplianceStandard.
        :rtype: list[int]
        """
        return self._compliance_domain_ids

    @compliance_domain_ids.setter
    def compliance_domain_ids(self, compliance_domain_ids):
        """
        Sets the compliance_domain_ids of this ComplianceStandard.
        Associated Compliance Domains Ids

        :param compliance_domain_ids: The compliance_domain_ids of this ComplianceStandard.
        :type: list[int]
        """

        self._compliance_domain_ids = compliance_domain_ids

    @property
    def compliance_controls(self):
        """
        Gets the compliance_controls of this ComplianceStandard.
        Associated Compliance Controls

        :return: The compliance_controls of this ComplianceStandard.
        :rtype: list[ComplianceControl]
        """
        return self._compliance_controls

    @compliance_controls.setter
    def compliance_controls(self, compliance_controls):
        """
        Sets the compliance_controls of this ComplianceStandard.
        Associated Compliance Controls

        :param compliance_controls: The compliance_controls of this ComplianceStandard.
        :type: list[ComplianceControl]
        """

        self._compliance_controls = compliance_controls

    @property
    def compliance_control_ids(self):
        """
        Gets the compliance_control_ids of this ComplianceStandard.
        Associated Compliance Controls Ids

        :return: The compliance_control_ids of this ComplianceStandard.
        :rtype: list[int]
        """
        return self._compliance_control_ids

    @compliance_control_ids.setter
    def compliance_control_ids(self, compliance_control_ids):
        """
        Sets the compliance_control_ids of this ComplianceStandard.
        Associated Compliance Controls Ids

        :param compliance_control_ids: The compliance_control_ids of this ComplianceStandard.
        :type: list[int]
        """

        self._compliance_control_ids = compliance_control_ids

    @property
    def errors(self):
        """
        Gets the errors of this ComplianceStandard.
        Array of error messages if the request failed

        :return: The errors of this ComplianceStandard.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this ComplianceStandard.
        Array of error messages if the request failed

        :param errors: The errors of this ComplianceStandard.
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ComplianceStandard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
