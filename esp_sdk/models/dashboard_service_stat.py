# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class DashboardServiceStat(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, service=None, total_pass=None, total_fail=None, total_warn=None, total_error=None, total_info=None, total_new_1h=None, total_new_1d=None, total_new_1d_pass=None, total_new_1d_fail=None, total_new_1d_warn=None, total_new_1d_error=None, total_new_1d_info=None):
        """
        DashboardServiceStat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'service': 'Service',
            'total_pass': 'int',
            'total_fail': 'int',
            'total_warn': 'int',
            'total_error': 'int',
            'total_info': 'int',
            'total_new_1h': 'int',
            'total_new_1d': 'int',
            'total_new_1d_pass': 'int',
            'total_new_1d_fail': 'int',
            'total_new_1d_warn': 'int',
            'total_new_1d_error': 'int',
            'total_new_1d_info': 'int'
        }

        self.attribute_map = {
            'service': 'service',
            'total_pass': 'total_pass',
            'total_fail': 'total_fail',
            'total_warn': 'total_warn',
            'total_error': 'total_error',
            'total_info': 'total_info',
            'total_new_1h': 'total_new_1h',
            'total_new_1d': 'total_new_1d',
            'total_new_1d_pass': 'total_new_1d_pass',
            'total_new_1d_fail': 'total_new_1d_fail',
            'total_new_1d_warn': 'total_new_1d_warn',
            'total_new_1d_error': 'total_new_1d_error',
            'total_new_1d_info': 'total_new_1d_info'
        }

        self._service = service
        self._total_pass = total_pass
        self._total_fail = total_fail
        self._total_warn = total_warn
        self._total_error = total_error
        self._total_info = total_info
        self._total_new_1h = total_new_1h
        self._total_new_1d = total_new_1d
        self._total_new_1d_pass = total_new_1d_pass
        self._total_new_1d_fail = total_new_1d_fail
        self._total_new_1d_warn = total_new_1d_warn
        self._total_new_1d_error = total_new_1d_error
        self._total_new_1d_info = total_new_1d_info

    @property
    def service(self):
        """
        Gets the service of this DashboardServiceStat.

        :return: The service of this DashboardServiceStat.
        :rtype: Service
        """
        return self._service

    @service.setter
    def service(self, service):
        """
        Sets the service of this DashboardServiceStat.

        :param service: The service of this DashboardServiceStat.
        :type: Service
        """

        self._service = service

    @property
    def total_pass(self):
        """
        Gets the total_pass of this DashboardServiceStat.

        :return: The total_pass of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_pass

    @total_pass.setter
    def total_pass(self, total_pass):
        """
        Sets the total_pass of this DashboardServiceStat.

        :param total_pass: The total_pass of this DashboardServiceStat.
        :type: int
        """

        self._total_pass = total_pass

    @property
    def total_fail(self):
        """
        Gets the total_fail of this DashboardServiceStat.

        :return: The total_fail of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_fail

    @total_fail.setter
    def total_fail(self, total_fail):
        """
        Sets the total_fail of this DashboardServiceStat.

        :param total_fail: The total_fail of this DashboardServiceStat.
        :type: int
        """

        self._total_fail = total_fail

    @property
    def total_warn(self):
        """
        Gets the total_warn of this DashboardServiceStat.

        :return: The total_warn of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_warn

    @total_warn.setter
    def total_warn(self, total_warn):
        """
        Sets the total_warn of this DashboardServiceStat.

        :param total_warn: The total_warn of this DashboardServiceStat.
        :type: int
        """

        self._total_warn = total_warn

    @property
    def total_error(self):
        """
        Gets the total_error of this DashboardServiceStat.

        :return: The total_error of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_error

    @total_error.setter
    def total_error(self, total_error):
        """
        Sets the total_error of this DashboardServiceStat.

        :param total_error: The total_error of this DashboardServiceStat.
        :type: int
        """

        self._total_error = total_error

    @property
    def total_info(self):
        """
        Gets the total_info of this DashboardServiceStat.

        :return: The total_info of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_info

    @total_info.setter
    def total_info(self, total_info):
        """
        Sets the total_info of this DashboardServiceStat.

        :param total_info: The total_info of this DashboardServiceStat.
        :type: int
        """

        self._total_info = total_info

    @property
    def total_new_1h(self):
        """
        Gets the total_new_1h of this DashboardServiceStat.

        :return: The total_new_1h of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_new_1h

    @total_new_1h.setter
    def total_new_1h(self, total_new_1h):
        """
        Sets the total_new_1h of this DashboardServiceStat.

        :param total_new_1h: The total_new_1h of this DashboardServiceStat.
        :type: int
        """

        self._total_new_1h = total_new_1h

    @property
    def total_new_1d(self):
        """
        Gets the total_new_1d of this DashboardServiceStat.

        :return: The total_new_1d of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_new_1d

    @total_new_1d.setter
    def total_new_1d(self, total_new_1d):
        """
        Sets the total_new_1d of this DashboardServiceStat.

        :param total_new_1d: The total_new_1d of this DashboardServiceStat.
        :type: int
        """

        self._total_new_1d = total_new_1d

    @property
    def total_new_1d_pass(self):
        """
        Gets the total_new_1d_pass of this DashboardServiceStat.

        :return: The total_new_1d_pass of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_new_1d_pass

    @total_new_1d_pass.setter
    def total_new_1d_pass(self, total_new_1d_pass):
        """
        Sets the total_new_1d_pass of this DashboardServiceStat.

        :param total_new_1d_pass: The total_new_1d_pass of this DashboardServiceStat.
        :type: int
        """

        self._total_new_1d_pass = total_new_1d_pass

    @property
    def total_new_1d_fail(self):
        """
        Gets the total_new_1d_fail of this DashboardServiceStat.

        :return: The total_new_1d_fail of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_new_1d_fail

    @total_new_1d_fail.setter
    def total_new_1d_fail(self, total_new_1d_fail):
        """
        Sets the total_new_1d_fail of this DashboardServiceStat.

        :param total_new_1d_fail: The total_new_1d_fail of this DashboardServiceStat.
        :type: int
        """

        self._total_new_1d_fail = total_new_1d_fail

    @property
    def total_new_1d_warn(self):
        """
        Gets the total_new_1d_warn of this DashboardServiceStat.

        :return: The total_new_1d_warn of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_new_1d_warn

    @total_new_1d_warn.setter
    def total_new_1d_warn(self, total_new_1d_warn):
        """
        Sets the total_new_1d_warn of this DashboardServiceStat.

        :param total_new_1d_warn: The total_new_1d_warn of this DashboardServiceStat.
        :type: int
        """

        self._total_new_1d_warn = total_new_1d_warn

    @property
    def total_new_1d_error(self):
        """
        Gets the total_new_1d_error of this DashboardServiceStat.

        :return: The total_new_1d_error of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_new_1d_error

    @total_new_1d_error.setter
    def total_new_1d_error(self, total_new_1d_error):
        """
        Sets the total_new_1d_error of this DashboardServiceStat.

        :param total_new_1d_error: The total_new_1d_error of this DashboardServiceStat.
        :type: int
        """

        self._total_new_1d_error = total_new_1d_error

    @property
    def total_new_1d_info(self):
        """
        Gets the total_new_1d_info of this DashboardServiceStat.

        :return: The total_new_1d_info of this DashboardServiceStat.
        :rtype: int
        """
        return self._total_new_1d_info

    @total_new_1d_info.setter
    def total_new_1d_info(self, total_new_1d_info):
        """
        Sets the total_new_1d_info of this DashboardServiceStat.

        :param total_new_1d_info: The total_new_1d_info of this DashboardServiceStat.
        :type: int
        """

        self._total_new_1d_info = total_new_1d_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DashboardServiceStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
