# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class UserPermission(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, item=None, allowed=None, action=None, errors=None):
        """
        UserPermission - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'item': 'str',
            'allowed': 'bool',
            'action': 'str',
            'errors': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'item': 'item',
            'allowed': 'allowed',
            'action': 'action',
            'errors': 'errors'
        }

        self._id = id
        self._item = item
        self._allowed = allowed
        self._action = action
        self._errors = errors

    @property
    def id(self):
        """
        Gets the id of this UserPermission.
        Unique ID

        :return: The id of this UserPermission.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserPermission.
        Unique ID

        :param id: The id of this UserPermission.
        :type: int
        """

        self._id = id

    @property
    def item(self):
        """
        Gets the item of this UserPermission.
        The Item for the permission

        :return: The item of this UserPermission.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """
        Sets the item of this UserPermission.
        The Item for the permission

        :param item: The item of this UserPermission.
        :type: str
        """

        self._item = item

    @property
    def allowed(self):
        """
        Gets the allowed of this UserPermission.
        If the user is allowed to perform the action on the item

        :return: The allowed of this UserPermission.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """
        Sets the allowed of this UserPermission.
        If the user is allowed to perform the action on the item

        :param allowed: The allowed of this UserPermission.
        :type: bool
        """

        self._allowed = allowed

    @property
    def action(self):
        """
        Gets the action of this UserPermission.
        The action for the permission

        :return: The action of this UserPermission.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this UserPermission.
        The action for the permission

        :param action: The action of this UserPermission.
        :type: str
        """

        self._action = action

    @property
    def errors(self):
        """
        Gets the errors of this UserPermission.
        Array of error messages if the request failed

        :return: The errors of this UserPermission.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this UserPermission.
        Array of error messages if the request failed

        :param errors: The errors of this UserPermission.
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
