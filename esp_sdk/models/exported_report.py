# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ExportedReport(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, recipient_id=None, recipient_type=None, report_ids=None, format=None, url=None, file_name=None, filter=None, created_at=None, updated_at=None, recipient=None):
        """
        ExportedReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'recipient_id': 'int',
            'recipient_type': 'str',
            'report_ids': 'list[int]',
            'format': 'str',
            'url': 'str',
            'file_name': 'str',
            'filter': 'object',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'recipient': 'User'
        }

        self.attribute_map = {
            'id': 'id',
            'recipient_id': 'recipient_id',
            'recipient_type': 'recipient_type',
            'report_ids': 'report_ids',
            'format': 'format',
            'url': 'url',
            'file_name': 'file_name',
            'filter': 'filter',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'recipient': 'recipient'
        }

        self._id = id
        self._recipient_id = recipient_id
        self._recipient_type = recipient_type
        self._report_ids = report_ids
        self._format = format
        self._url = url
        self._file_name = file_name
        self._filter = filter
        self._created_at = created_at
        self._updated_at = updated_at
        self._recipient = recipient

    @property
    def id(self):
        """
        Gets the id of this ExportedReport.
        Unique ID

        :return: The id of this ExportedReport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ExportedReport.
        Unique ID

        :param id: The id of this ExportedReport.
        :type: int
        """

        self._id = id

    @property
    def recipient_id(self):
        """
        Gets the recipient_id of this ExportedReport.
        Associated Recipient ID

        :return: The recipient_id of this ExportedReport.
        :rtype: int
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """
        Sets the recipient_id of this ExportedReport.
        Associated Recipient ID

        :param recipient_id: The recipient_id of this ExportedReport.
        :type: int
        """

        self._recipient_id = recipient_id

    @property
    def recipient_type(self):
        """
        Gets the recipient_type of this ExportedReport.
        Polymorphic recipient type. Valid values are User, ScheduledExportResult

        :return: The recipient_type of this ExportedReport.
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """
        Sets the recipient_type of this ExportedReport.
        Polymorphic recipient type. Valid values are User, ScheduledExportResult

        :param recipient_type: The recipient_type of this ExportedReport.
        :type: str
        """

        self._recipient_type = recipient_type

    @property
    def report_ids(self):
        """
        Gets the report_ids of this ExportedReport.
        An array of report IDs to export alerts for

        :return: The report_ids of this ExportedReport.
        :rtype: list[int]
        """
        return self._report_ids

    @report_ids.setter
    def report_ids(self, report_ids):
        """
        Sets the report_ids of this ExportedReport.
        An array of report IDs to export alerts for

        :param report_ids: The report_ids of this ExportedReport.
        :type: list[int]
        """

        self._report_ids = report_ids

    @property
    def format(self):
        """
        Gets the format of this ExportedReport.
        The file format of the export. Valid values are csv, json, pdf

        :return: The format of this ExportedReport.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this ExportedReport.
        The file format of the export. Valid values are csv, json, pdf

        :param format: The format of this ExportedReport.
        :type: str
        """

        self._format = format

    @property
    def url(self):
        """
        Gets the url of this ExportedReport.
        A temporary URL where the file can be accessed

        :return: The url of this ExportedReport.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ExportedReport.
        A temporary URL where the file can be accessed

        :param url: The url of this ExportedReport.
        :type: str
        """

        self._url = url

    @property
    def file_name(self):
        """
        Gets the file_name of this ExportedReport.
        The name of the file

        :return: The file_name of this ExportedReport.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this ExportedReport.
        The name of the file

        :param file_name: The file_name of this ExportedReport.
        :type: str
        """

        self._file_name = file_name

    @property
    def filter(self):
        """
        Gets the filter of this ExportedReport.
        Params used to filter the alerts that will be exported

        :return: The filter of this ExportedReport.
        :rtype: object
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this ExportedReport.
        Params used to filter the alerts that will be exported

        :param filter: The filter of this ExportedReport.
        :type: object
        """

        self._filter = filter

    @property
    def created_at(self):
        """
        Gets the created_at of this ExportedReport.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this ExportedReport.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ExportedReport.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this ExportedReport.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ExportedReport.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this ExportedReport.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ExportedReport.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this ExportedReport.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def recipient(self):
        """
        Gets the recipient of this ExportedReport.
        Associated Recipient

        :return: The recipient of this ExportedReport.
        :rtype: User
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """
        Sets the recipient of this ExportedReport.
        Associated Recipient

        :param recipient: The recipient of this ExportedReport.
        :type: User
        """

        self._recipient = recipient

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExportedReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
