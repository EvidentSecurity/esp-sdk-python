# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class IntegrationAmazonSns(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, topic=None, region_id=None, created_at=None, updated_at=None, arn=None, external_id=None, region=None, integration=None, integration_id=None):
        """
        IntegrationAmazonSns - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'topic': 'str',
            'region_id': 'int',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'arn': 'str',
            'external_id': 'str',
            'region': 'Region',
            'integration': 'Integration',
            'integration_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'topic': 'topic',
            'region_id': 'region_id',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'arn': 'arn',
            'external_id': 'external_id',
            'region': 'region',
            'integration': 'integration',
            'integration_id': 'integration_id'
        }

        self._id = id
        self._topic = topic
        self._region_id = region_id
        self._created_at = created_at
        self._updated_at = updated_at
        self._arn = arn
        self._external_id = external_id
        self._region = region
        self._integration = integration
        self._integration_id = integration_id

    @property
    def id(self):
        """
        Gets the id of this IntegrationAmazonSns.
        Unique ID

        :return: The id of this IntegrationAmazonSns.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this IntegrationAmazonSns.
        Unique ID

        :param id: The id of this IntegrationAmazonSns.
        :type: int
        """

        self._id = id

    @property
    def topic(self):
        """
        Gets the topic of this IntegrationAmazonSns.
        The SNS topic arn

        :return: The topic of this IntegrationAmazonSns.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """
        Sets the topic of this IntegrationAmazonSns.
        The SNS topic arn

        :param topic: The topic of this IntegrationAmazonSns.
        :type: str
        """

        self._topic = topic

    @property
    def region_id(self):
        """
        Gets the region_id of this IntegrationAmazonSns.
        Associated Region ID

        :return: The region_id of this IntegrationAmazonSns.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """
        Sets the region_id of this IntegrationAmazonSns.
        Associated Region ID

        :param region_id: The region_id of this IntegrationAmazonSns.
        :type: int
        """

        self._region_id = region_id

    @property
    def created_at(self):
        """
        Gets the created_at of this IntegrationAmazonSns.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this IntegrationAmazonSns.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this IntegrationAmazonSns.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this IntegrationAmazonSns.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this IntegrationAmazonSns.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this IntegrationAmazonSns.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this IntegrationAmazonSns.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this IntegrationAmazonSns.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def arn(self):
        """
        Gets the arn of this IntegrationAmazonSns.
        The role arn for accessing the SNS topic

        :return: The arn of this IntegrationAmazonSns.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """
        Sets the arn of this IntegrationAmazonSns.
        The role arn for accessing the SNS topic

        :param arn: The arn of this IntegrationAmazonSns.
        :type: str
        """

        self._arn = arn

    @property
    def external_id(self):
        """
        Gets the external_id of this IntegrationAmazonSns.
        The external ID for the IAM role

        :return: The external_id of this IntegrationAmazonSns.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this IntegrationAmazonSns.
        The external ID for the IAM role

        :param external_id: The external_id of this IntegrationAmazonSns.
        :type: str
        """

        self._external_id = external_id

    @property
    def region(self):
        """
        Gets the region of this IntegrationAmazonSns.
        Associated Region

        :return: The region of this IntegrationAmazonSns.
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this IntegrationAmazonSns.
        Associated Region

        :param region: The region of this IntegrationAmazonSns.
        :type: Region
        """

        self._region = region

    @property
    def integration(self):
        """
        Gets the integration of this IntegrationAmazonSns.
        Associated Integration

        :return: The integration of this IntegrationAmazonSns.
        :rtype: Integration
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """
        Sets the integration of this IntegrationAmazonSns.
        Associated Integration

        :param integration: The integration of this IntegrationAmazonSns.
        :type: Integration
        """

        self._integration = integration

    @property
    def integration_id(self):
        """
        Gets the integration_id of this IntegrationAmazonSns.
        Associated Integration ID

        :return: The integration_id of this IntegrationAmazonSns.
        :rtype: int
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """
        Sets the integration_id of this IntegrationAmazonSns.
        Associated Integration ID

        :param integration_id: The integration_id of this IntegrationAmazonSns.
        :type: int
        """

        self._integration_id = integration_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IntegrationAmazonSns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
