# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ContactRequest(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, title=None, request_type=None, description=None, created_at=None, updated_at=None, user=None, user_id=None):
        """
        ContactRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'title': 'str',
            'request_type': 'str',
            'description': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'user': 'User',
            'user_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'request_type': 'request_type',
            'description': 'description',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._id = id
        self._title = title
        self._request_type = request_type
        self._description = description
        self._created_at = created_at
        self._updated_at = updated_at
        self._user = user
        self._user_id = user_id

    @property
    def id(self):
        """
        Gets the id of this ContactRequest.
        Unique ID

        :return: The id of this ContactRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ContactRequest.
        Unique ID

        :param id: The id of this ContactRequest.
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this ContactRequest.
        Subject of your message

        :return: The title of this ContactRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ContactRequest.
        Subject of your message

        :param title: The title of this ContactRequest.
        :type: str
        """

        self._title = title

    @property
    def request_type(self):
        """
        Gets the request_type of this ContactRequest.
        Type of contact request. Valid values are support, feature

        :return: The request_type of this ContactRequest.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """
        Sets the request_type of this ContactRequest.
        Type of contact request. Valid values are support, feature

        :param request_type: The request_type of this ContactRequest.
        :type: str
        """

        self._request_type = request_type

    @property
    def description(self):
        """
        Gets the description of this ContactRequest.
        Body of your message

        :return: The description of this ContactRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ContactRequest.
        Body of your message

        :param description: The description of this ContactRequest.
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """
        Gets the created_at of this ContactRequest.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this ContactRequest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ContactRequest.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this ContactRequest.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ContactRequest.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this ContactRequest.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ContactRequest.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this ContactRequest.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """
        Gets the user of this ContactRequest.
        Associated User

        :return: The user of this ContactRequest.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this ContactRequest.
        Associated User

        :param user: The user of this ContactRequest.
        :type: User
        """

        self._user = user

    @property
    def user_id(self):
        """
        Gets the user_id of this ContactRequest.
        Associated User ID

        :return: The user_id of this ContactRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ContactRequest.
        Associated User ID

        :param user_id: The user_id of this ContactRequest.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ContactRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
