# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class AuditLogFileAttributes(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, file_name=None, format=None, created_at=None, updated_at=None):
        """
        AuditLogFileAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file_name': 'str',
            'format': 'str',
            'created_at': 'Datetime',
            'updated_at': 'Datetime'
        }

        self.attribute_map = {
            'file_name': 'file_name',
            'format': 'format',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._file_name = file_name
        self._format = format
        self._created_at = created_at
        self._updated_at = updated_at

    @property
    def file_name(self):
        """
        Gets the file_name of this AuditLogFileAttributes.
        File Name

        :return: The file_name of this AuditLogFileAttributes.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this AuditLogFileAttributes.
        File Name

        :param file_name: The file_name of this AuditLogFileAttributes.
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def format(self):
        """
        Gets the format of this AuditLogFileAttributes.
        Format of the file

        :return: The format of this AuditLogFileAttributes.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this AuditLogFileAttributes.
        Format of the file

        :param format: The format of this AuditLogFileAttributes.
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def created_at(self):
        """
        Gets the created_at of this AuditLogFileAttributes.
        Timestamp of when this file was created

        :return: The created_at of this AuditLogFileAttributes.
        :rtype: Datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this AuditLogFileAttributes.
        Timestamp of when this file was created

        :param created_at: The created_at of this AuditLogFileAttributes.
        :type: Datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this AuditLogFileAttributes.
        Timestamp of when this entry was updated

        :return: The updated_at of this AuditLogFileAttributes.
        :rtype: Datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this AuditLogFileAttributes.
        Timestamp of when this entry was updated

        :param updated_at: The updated_at of this AuditLogFileAttributes.
        :type: Datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuditLogFileAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
