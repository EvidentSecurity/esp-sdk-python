# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class AuditLog(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, item_type=None, item_id=None, action=None, successful=None, access_denied=None, user_ip=None, user_email=None, platform=None, created_at=None, updated_at=None, organization=None, organization_id=None, user=None, user_id=None):
        """
        AuditLog - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'item_type': 'str',
            'item_id': 'int',
            'action': 'str',
            'successful': 'bool',
            'access_denied': 'bool',
            'user_ip': 'str',
            'user_email': 'str',
            'platform': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'organization': 'Organization',
            'organization_id': 'int',
            'user': 'User',
            'user_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'item_type': 'item_type',
            'item_id': 'item_id',
            'action': 'action',
            'successful': 'successful',
            'access_denied': 'access_denied',
            'user_ip': 'user_ip',
            'user_email': 'user_email',
            'platform': 'platform',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'organization': 'organization',
            'organization_id': 'organization_id',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._id = id
        self._item_type = item_type
        self._item_id = item_id
        self._action = action
        self._successful = successful
        self._access_denied = access_denied
        self._user_ip = user_ip
        self._user_email = user_email
        self._platform = platform
        self._created_at = created_at
        self._updated_at = updated_at
        self._organization = organization
        self._organization_id = organization_id
        self._user = user
        self._user_id = user_id

    @property
    def id(self):
        """
        Gets the id of this AuditLog.
        Unique ID

        :return: The id of this AuditLog.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuditLog.
        Unique ID

        :param id: The id of this AuditLog.
        :type: int
        """

        self._id = id

    @property
    def item_type(self):
        """
        Gets the item_type of this AuditLog.
        Item that was changed

        :return: The item_type of this AuditLog.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """
        Sets the item_type of this AuditLog.
        Item that was changed

        :param item_type: The item_type of this AuditLog.
        :type: str
        """

        self._item_type = item_type

    @property
    def item_id(self):
        """
        Gets the item_id of this AuditLog.
        ID of the item that was changed

        :return: The item_id of this AuditLog.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this AuditLog.
        ID of the item that was changed

        :param item_id: The item_id of this AuditLog.
        :type: int
        """

        self._item_id = item_id

    @property
    def action(self):
        """
        Gets the action of this AuditLog.
        Action attempted on the item

        :return: The action of this AuditLog.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this AuditLog.
        Action attempted on the item

        :param action: The action of this AuditLog.
        :type: str
        """

        self._action = action

    @property
    def successful(self):
        """
        Gets the successful of this AuditLog.
        Shows if the action was successful

        :return: The successful of this AuditLog.
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """
        Sets the successful of this AuditLog.
        Shows if the action was successful

        :param successful: The successful of this AuditLog.
        :type: bool
        """

        self._successful = successful

    @property
    def access_denied(self):
        """
        Gets the access_denied of this AuditLog.
        Shows if access was denied

        :return: The access_denied of this AuditLog.
        :rtype: bool
        """
        return self._access_denied

    @access_denied.setter
    def access_denied(self, access_denied):
        """
        Sets the access_denied of this AuditLog.
        Shows if access was denied

        :param access_denied: The access_denied of this AuditLog.
        :type: bool
        """

        self._access_denied = access_denied

    @property
    def user_ip(self):
        """
        Gets the user_ip of this AuditLog.
        The IP of the user attempting the action

        :return: The user_ip of this AuditLog.
        :rtype: str
        """
        return self._user_ip

    @user_ip.setter
    def user_ip(self, user_ip):
        """
        Sets the user_ip of this AuditLog.
        The IP of the user attempting the action

        :param user_ip: The user_ip of this AuditLog.
        :type: str
        """

        self._user_ip = user_ip

    @property
    def user_email(self):
        """
        Gets the user_email of this AuditLog.
        The email of the user attempting the action

        :return: The user_email of this AuditLog.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """
        Sets the user_email of this AuditLog.
        The email of the user attempting the action

        :param user_email: The user_email of this AuditLog.
        :type: str
        """

        self._user_email = user_email

    @property
    def platform(self):
        """
        Gets the platform of this AuditLog.
        The platform the user attempted the action from

        :return: The platform of this AuditLog.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this AuditLog.
        The platform the user attempted the action from

        :param platform: The platform of this AuditLog.
        :type: str
        """

        self._platform = platform

    @property
    def created_at(self):
        """
        Gets the created_at of this AuditLog.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this AuditLog.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this AuditLog.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this AuditLog.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this AuditLog.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this AuditLog.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this AuditLog.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this AuditLog.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def organization(self):
        """
        Gets the organization of this AuditLog.
        Associated Organization

        :return: The organization of this AuditLog.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this AuditLog.
        Associated Organization

        :param organization: The organization of this AuditLog.
        :type: Organization
        """

        self._organization = organization

    @property
    def organization_id(self):
        """
        Gets the organization_id of this AuditLog.
        Associated Organization ID

        :return: The organization_id of this AuditLog.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this AuditLog.
        Associated Organization ID

        :param organization_id: The organization_id of this AuditLog.
        :type: int
        """

        self._organization_id = organization_id

    @property
    def user(self):
        """
        Gets the user of this AuditLog.
        Associated User

        :return: The user of this AuditLog.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this AuditLog.
        Associated User

        :param user: The user of this AuditLog.
        :type: User
        """

        self._user = user

    @property
    def user_id(self):
        """
        Gets the user_id of this AuditLog.
        Associated User ID

        :return: The user_id of this AuditLog.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this AuditLog.
        Associated User ID

        :param user_id: The user_id of this AuditLog.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuditLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
