# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class DashboardStat(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, total=None, stat_services=None, stat_regions=None, stat_compliance_controls=None):
        """
        DashboardStat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'total': 'int',
            'stat_services': 'list[DashboardServiceStat]',
            'stat_regions': 'list[DashboardRegionStat]',
            'stat_compliance_controls': 'list[DashboardComplianceControlStat]'
        }

        self.attribute_map = {
            'id': 'id',
            'total': 'total',
            'stat_services': 'stat_services',
            'stat_regions': 'stat_regions',
            'stat_compliance_controls': 'stat_compliance_controls'
        }

        self._id = id
        self._total = total
        self._stat_services = stat_services
        self._stat_regions = stat_regions
        self._stat_compliance_controls = stat_compliance_controls

    @property
    def id(self):
        """
        Gets the id of this DashboardStat.
        Stat ID

        :return: The id of this DashboardStat.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DashboardStat.
        Stat ID

        :param id: The id of this DashboardStat.
        :type: int
        """

        self._id = id

    @property
    def total(self):
        """
        Gets the total of this DashboardStat.

        :return: The total of this DashboardStat.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this DashboardStat.

        :param total: The total of this DashboardStat.
        :type: int
        """

        self._total = total

    @property
    def stat_services(self):
        """
        Gets the stat_services of this DashboardStat.
        Service Stats

        :return: The stat_services of this DashboardStat.
        :rtype: list[DashboardServiceStat]
        """
        return self._stat_services

    @stat_services.setter
    def stat_services(self, stat_services):
        """
        Sets the stat_services of this DashboardStat.
        Service Stats

        :param stat_services: The stat_services of this DashboardStat.
        :type: list[DashboardServiceStat]
        """

        self._stat_services = stat_services

    @property
    def stat_regions(self):
        """
        Gets the stat_regions of this DashboardStat.
        Region Stats

        :return: The stat_regions of this DashboardStat.
        :rtype: list[DashboardRegionStat]
        """
        return self._stat_regions

    @stat_regions.setter
    def stat_regions(self, stat_regions):
        """
        Sets the stat_regions of this DashboardStat.
        Region Stats

        :param stat_regions: The stat_regions of this DashboardStat.
        :type: list[DashboardRegionStat]
        """

        self._stat_regions = stat_regions

    @property
    def stat_compliance_controls(self):
        """
        Gets the stat_compliance_controls of this DashboardStat.
        Compliance Control Stats

        :return: The stat_compliance_controls of this DashboardStat.
        :rtype: list[DashboardComplianceControlStat]
        """
        return self._stat_compliance_controls

    @stat_compliance_controls.setter
    def stat_compliance_controls(self, stat_compliance_controls):
        """
        Sets the stat_compliance_controls of this DashboardStat.
        Compliance Control Stats

        :param stat_compliance_controls: The stat_compliance_controls of this DashboardStat.
        :type: list[DashboardComplianceControlStat]
        """

        self._stat_compliance_controls = stat_compliance_controls

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DashboardStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
