# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class CustomSignature(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, description=None, identifier=None, name=None, resolution=None, risk_level=None, updated_at=None, organization=None, organization_id=None, external_accounts=None, external_account_ids=None, definitions=None, definition_ids=None, suppressions=None, suppression_ids=None):
        """
        CustomSignature - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'description': 'str',
            'identifier': 'str',
            'name': 'str',
            'resolution': 'str',
            'risk_level': 'str',
            'updated_at': 'datetime',
            'organization': 'Organization',
            'organization_id': 'int',
            'external_accounts': 'list[ExternalAccount]',
            'external_account_ids': 'list[int]',
            'definitions': 'list[CustomSignatureDefinition]',
            'definition_ids': 'list[int]',
            'suppressions': 'list[Suppression]',
            'suppression_ids': 'list[int]'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'description': 'description',
            'identifier': 'identifier',
            'name': 'name',
            'resolution': 'resolution',
            'risk_level': 'risk_level',
            'updated_at': 'updated_at',
            'organization': 'organization',
            'organization_id': 'organization_id',
            'external_accounts': 'external_accounts',
            'external_account_ids': 'external_account_ids',
            'definitions': 'definitions',
            'definition_ids': 'definition_ids',
            'suppressions': 'suppressions',
            'suppression_ids': 'suppression_ids'
        }

        self._id = id
        self._created_at = created_at
        self._description = description
        self._identifier = identifier
        self._name = name
        self._resolution = resolution
        self._risk_level = risk_level
        self._updated_at = updated_at
        self._organization = organization
        self._organization_id = organization_id
        self._external_accounts = external_accounts
        self._external_account_ids = external_account_ids
        self._definitions = definitions
        self._definition_ids = definition_ids
        self._suppressions = suppressions
        self._suppression_ids = suppression_ids

    @property
    def id(self):
        """
        Gets the id of this CustomSignature.
        Unique ID

        :return: The id of this CustomSignature.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomSignature.
        Unique ID

        :param id: The id of this CustomSignature.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this CustomSignature.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this CustomSignature.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CustomSignature.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this CustomSignature.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """
        Gets the description of this CustomSignature.
        The description of the custom signature that is displayed on alerts

        :return: The description of this CustomSignature.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CustomSignature.
        The description of the custom signature that is displayed on alerts

        :param description: The description of this CustomSignature.
        :type: str
        """

        self._description = description

    @property
    def identifier(self):
        """
        Gets the identifier of this CustomSignature.
        The identifier to use for the custom signature. Common format is AWS:- such as AWS:IAM-001

        :return: The identifier of this CustomSignature.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this CustomSignature.
        The identifier to use for the custom signature. Common format is AWS:- such as AWS:IAM-001

        :param identifier: The identifier of this CustomSignature.
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """
        Gets the name of this CustomSignature.
        The name of the custom signature

        :return: The name of this CustomSignature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CustomSignature.
        The name of the custom signature

        :param name: The name of this CustomSignature.
        :type: str
        """

        self._name = name

    @property
    def resolution(self):
        """
        Gets the resolution of this CustomSignature.
        Details for how to resolve this custom signature that is displayed on alerts

        :return: The resolution of this CustomSignature.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """
        Sets the resolution of this CustomSignature.
        Details for how to resolve this custom signature that is displayed on alerts

        :param resolution: The resolution of this CustomSignature.
        :type: str
        """

        self._resolution = resolution

    @property
    def risk_level(self):
        """
        Gets the risk_level of this CustomSignature.
        The risk-level of the problem identified by the custom signature. Valid values are low, medium, high

        :return: The risk_level of this CustomSignature.
        :rtype: str
        """
        return self._risk_level

    @risk_level.setter
    def risk_level(self, risk_level):
        """
        Sets the risk_level of this CustomSignature.
        The risk-level of the problem identified by the custom signature. Valid values are low, medium, high

        :param risk_level: The risk_level of this CustomSignature.
        :type: str
        """

        self._risk_level = risk_level

    @property
    def updated_at(self):
        """
        Gets the updated_at of this CustomSignature.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this CustomSignature.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this CustomSignature.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this CustomSignature.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def organization(self):
        """
        Gets the organization of this CustomSignature.
        Associated Organization

        :return: The organization of this CustomSignature.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this CustomSignature.
        Associated Organization

        :param organization: The organization of this CustomSignature.
        :type: Organization
        """

        self._organization = organization

    @property
    def organization_id(self):
        """
        Gets the organization_id of this CustomSignature.
        Associated Organization ID

        :return: The organization_id of this CustomSignature.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this CustomSignature.
        Associated Organization ID

        :param organization_id: The organization_id of this CustomSignature.
        :type: int
        """

        self._organization_id = organization_id

    @property
    def external_accounts(self):
        """
        Gets the external_accounts of this CustomSignature.
        Associated External Accounts

        :return: The external_accounts of this CustomSignature.
        :rtype: list[ExternalAccount]
        """
        return self._external_accounts

    @external_accounts.setter
    def external_accounts(self, external_accounts):
        """
        Sets the external_accounts of this CustomSignature.
        Associated External Accounts

        :param external_accounts: The external_accounts of this CustomSignature.
        :type: list[ExternalAccount]
        """

        self._external_accounts = external_accounts

    @property
    def external_account_ids(self):
        """
        Gets the external_account_ids of this CustomSignature.
        Associated External Accounts IDs

        :return: The external_account_ids of this CustomSignature.
        :rtype: list[int]
        """
        return self._external_account_ids

    @external_account_ids.setter
    def external_account_ids(self, external_account_ids):
        """
        Sets the external_account_ids of this CustomSignature.
        Associated External Accounts IDs

        :param external_account_ids: The external_account_ids of this CustomSignature.
        :type: list[int]
        """

        self._external_account_ids = external_account_ids

    @property
    def definitions(self):
        """
        Gets the definitions of this CustomSignature.
        Associated Definitions

        :return: The definitions of this CustomSignature.
        :rtype: list[CustomSignatureDefinition]
        """
        return self._definitions

    @definitions.setter
    def definitions(self, definitions):
        """
        Sets the definitions of this CustomSignature.
        Associated Definitions

        :param definitions: The definitions of this CustomSignature.
        :type: list[CustomSignatureDefinition]
        """

        self._definitions = definitions

    @property
    def definition_ids(self):
        """
        Gets the definition_ids of this CustomSignature.
        Associated Definitions IDs

        :return: The definition_ids of this CustomSignature.
        :rtype: list[int]
        """
        return self._definition_ids

    @definition_ids.setter
    def definition_ids(self, definition_ids):
        """
        Sets the definition_ids of this CustomSignature.
        Associated Definitions IDs

        :param definition_ids: The definition_ids of this CustomSignature.
        :type: list[int]
        """

        self._definition_ids = definition_ids

    @property
    def suppressions(self):
        """
        Gets the suppressions of this CustomSignature.
        Associated Suppressions

        :return: The suppressions of this CustomSignature.
        :rtype: list[Suppression]
        """
        return self._suppressions

    @suppressions.setter
    def suppressions(self, suppressions):
        """
        Sets the suppressions of this CustomSignature.
        Associated Suppressions

        :param suppressions: The suppressions of this CustomSignature.
        :type: list[Suppression]
        """

        self._suppressions = suppressions

    @property
    def suppression_ids(self):
        """
        Gets the suppression_ids of this CustomSignature.
        Associated Suppressions IDs

        :return: The suppression_ids of this CustomSignature.
        :rtype: list[int]
        """
        return self._suppression_ids

    @suppression_ids.setter
    def suppression_ids(self, suppression_ids):
        """
        Sets the suppression_ids of this CustomSignature.
        Associated Suppressions IDs

        :param suppression_ids: The suppression_ids of this CustomSignature.
        :type: list[int]
        """

        self._suppression_ids = suppression_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomSignature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
