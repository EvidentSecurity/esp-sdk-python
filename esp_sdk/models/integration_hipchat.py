# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class IntegrationHipchat(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, token=None, room=None, integration=None, integration_id=None):
        """
        IntegrationHipchat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'token': 'str',
            'room': 'str',
            'integration': 'Integration',
            'integration_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'token': 'token',
            'room': 'room',
            'integration': 'integration',
            'integration_id': 'integration_id'
        }

        self._id = id
        self._token = token
        self._room = room
        self._integration = integration
        self._integration_id = integration_id

    @property
    def id(self):
        """
        Gets the id of this IntegrationHipchat.
        Unique ID

        :return: The id of this IntegrationHipchat.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this IntegrationHipchat.
        Unique ID

        :param id: The id of this IntegrationHipchat.
        :type: int
        """

        self._id = id

    @property
    def token(self):
        """
        Gets the token of this IntegrationHipchat.
        The Hipchat token

        :return: The token of this IntegrationHipchat.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this IntegrationHipchat.
        The Hipchat token

        :param token: The token of this IntegrationHipchat.
        :type: str
        """

        self._token = token

    @property
    def room(self):
        """
        Gets the room of this IntegrationHipchat.
        The Hipchat room

        :return: The room of this IntegrationHipchat.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """
        Sets the room of this IntegrationHipchat.
        The Hipchat room

        :param room: The room of this IntegrationHipchat.
        :type: str
        """

        self._room = room

    @property
    def integration(self):
        """
        Gets the integration of this IntegrationHipchat.
        Associated Integration

        :return: The integration of this IntegrationHipchat.
        :rtype: Integration
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """
        Sets the integration of this IntegrationHipchat.
        Associated Integration

        :param integration: The integration of this IntegrationHipchat.
        :type: Integration
        """

        self._integration = integration

    @property
    def integration_id(self):
        """
        Gets the integration_id of this IntegrationHipchat.
        Associated Integration ID

        :return: The integration_id of this IntegrationHipchat.
        :rtype: int
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """
        Sets the integration_id of this IntegrationHipchat.
        Associated Integration ID

        :param integration_id: The integration_id of this IntegrationHipchat.
        :type: int
        """

        self._integration_id = integration_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IntegrationHipchat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
