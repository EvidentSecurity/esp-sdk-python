# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class CustomSignatureResult(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, code=None, language=None, status=None, updated_at=None, error_messages=None, external_account=None, external_account_id=None, region=None, region_id=None, definition=None, definition_id=None, alerts=None):
        """
        CustomSignatureResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'code': 'str',
            'language': 'str',
            'status': 'str',
            'updated_at': 'datetime',
            'error_messages': 'list[str]',
            'external_account': 'ExternalAccount',
            'external_account_id': 'int',
            'region': 'Region',
            'region_id': 'int',
            'definition': 'CustomSignatureDefinition',
            'definition_id': 'int',
            'alerts': 'list[Alert]'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'code': 'code',
            'language': 'language',
            'status': 'status',
            'updated_at': 'updated_at',
            'error_messages': 'error_messages',
            'external_account': 'external_account',
            'external_account_id': 'external_account_id',
            'region': 'region',
            'region_id': 'region_id',
            'definition': 'definition',
            'definition_id': 'definition_id',
            'alerts': 'alerts'
        }

        self._id = id
        self._created_at = created_at
        self._code = code
        self._language = language
        self._status = status
        self._updated_at = updated_at
        self._error_messages = error_messages
        self._external_account = external_account
        self._external_account_id = external_account_id
        self._region = region
        self._region_id = region_id
        self._definition = definition
        self._definition_id = definition_id
        self._alerts = alerts

    @property
    def id(self):
        """
        Gets the id of this CustomSignatureResult.
        Unique ID

        :return: The id of this CustomSignatureResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomSignatureResult.
        Unique ID

        :param id: The id of this CustomSignatureResult.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this CustomSignatureResult.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this CustomSignatureResult.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CustomSignatureResult.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this CustomSignatureResult.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def code(self):
        """
        Gets the code of this CustomSignatureResult.
        The code used for this result

        :return: The code of this CustomSignatureResult.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this CustomSignatureResult.
        The code used for this result

        :param code: The code of this CustomSignatureResult.
        :type: str
        """

        self._code = code

    @property
    def language(self):
        """
        Gets the language of this CustomSignatureResult.
        The language of the code. Valid values are ruby, javascript

        :return: The language of this CustomSignatureResult.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this CustomSignatureResult.
        The language of the code. Valid values are ruby, javascript

        :param language: The language of this CustomSignatureResult.
        :type: str
        """

        self._language = language

    @property
    def status(self):
        """
        Gets the status of this CustomSignatureResult.
        Status of the result. Valid values are running, failed, complete

        :return: The status of this CustomSignatureResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CustomSignatureResult.
        Status of the result. Valid values are running, failed, complete

        :param status: The status of this CustomSignatureResult.
        :type: str
        """

        self._status = status

    @property
    def updated_at(self):
        """
        Gets the updated_at of this CustomSignatureResult.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this CustomSignatureResult.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this CustomSignatureResult.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this CustomSignatureResult.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def error_messages(self):
        """
        Gets the error_messages of this CustomSignatureResult.
        Error messages that occurred while running the code

        :return: The error_messages of this CustomSignatureResult.
        :rtype: list[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """
        Sets the error_messages of this CustomSignatureResult.
        Error messages that occurred while running the code

        :param error_messages: The error_messages of this CustomSignatureResult.
        :type: list[str]
        """

        self._error_messages = error_messages

    @property
    def external_account(self):
        """
        Gets the external_account of this CustomSignatureResult.
        Associated External Account

        :return: The external_account of this CustomSignatureResult.
        :rtype: ExternalAccount
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """
        Sets the external_account of this CustomSignatureResult.
        Associated External Account

        :param external_account: The external_account of this CustomSignatureResult.
        :type: ExternalAccount
        """

        self._external_account = external_account

    @property
    def external_account_id(self):
        """
        Gets the external_account_id of this CustomSignatureResult.
        Associated External Account ID

        :return: The external_account_id of this CustomSignatureResult.
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """
        Sets the external_account_id of this CustomSignatureResult.
        Associated External Account ID

        :param external_account_id: The external_account_id of this CustomSignatureResult.
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def region(self):
        """
        Gets the region of this CustomSignatureResult.
        Associated Region

        :return: The region of this CustomSignatureResult.
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this CustomSignatureResult.
        Associated Region

        :param region: The region of this CustomSignatureResult.
        :type: Region
        """

        self._region = region

    @property
    def region_id(self):
        """
        Gets the region_id of this CustomSignatureResult.
        Associated Region ID

        :return: The region_id of this CustomSignatureResult.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """
        Sets the region_id of this CustomSignatureResult.
        Associated Region ID

        :param region_id: The region_id of this CustomSignatureResult.
        :type: int
        """

        self._region_id = region_id

    @property
    def definition(self):
        """
        Gets the definition of this CustomSignatureResult.
        Associated Definition

        :return: The definition of this CustomSignatureResult.
        :rtype: CustomSignatureDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """
        Sets the definition of this CustomSignatureResult.
        Associated Definition

        :param definition: The definition of this CustomSignatureResult.
        :type: CustomSignatureDefinition
        """

        self._definition = definition

    @property
    def definition_id(self):
        """
        Gets the definition_id of this CustomSignatureResult.
        Associated Definition ID

        :return: The definition_id of this CustomSignatureResult.
        :rtype: int
        """
        return self._definition_id

    @definition_id.setter
    def definition_id(self, definition_id):
        """
        Sets the definition_id of this CustomSignatureResult.
        Associated Definition ID

        :param definition_id: The definition_id of this CustomSignatureResult.
        :type: int
        """

        self._definition_id = definition_id

    @property
    def alerts(self):
        """
        Gets the alerts of this CustomSignatureResult.
        Associated Alerts

        :return: The alerts of this CustomSignatureResult.
        :rtype: list[Alert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """
        Sets the alerts of this CustomSignatureResult.
        Associated Alerts

        :param alerts: The alerts of this CustomSignatureResult.
        :type: list[Alert]
        """

        self._alerts = alerts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomSignatureResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
