# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class UserAttributes(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_at=None, email=None, time_zone=None, first_name=None, last_name=None, phone=None, mfa_enabled=None, disable_daily_emails=None, locked=None, locked_at=None, updated_at=None):
        """
        UserAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_at': 'str',
            'email': 'str',
            'time_zone': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'phone': 'object',
            'mfa_enabled': 'object',
            'disable_daily_emails': 'object',
            'locked': 'object',
            'locked_at': 'object',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'email': 'email',
            'time_zone': 'time_zone',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone': 'phone',
            'mfa_enabled': 'mfa_enabled',
            'disable_daily_emails': 'disable_daily_emails',
            'locked': 'locked',
            'locked_at': 'locked_at',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._email = email
        self._time_zone = time_zone
        self._first_name = first_name
        self._last_name = last_name
        self._phone = phone
        self._mfa_enabled = mfa_enabled
        self._disable_daily_emails = disable_daily_emails
        self._locked = locked
        self._locked_at = locked_at
        self._updated_at = updated_at

    @property
    def created_at(self):
        """
        Gets the created_at of this UserAttributes.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this UserAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this UserAttributes.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this UserAttributes.
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def email(self):
        """
        Gets the email of this UserAttributes.
        The email of the user

        :return: The email of this UserAttributes.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserAttributes.
        The email of the user

        :param email: The email of this UserAttributes.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def time_zone(self):
        """
        Gets the time_zone of this UserAttributes.
        The time-zone of the user

        :return: The time_zone of this UserAttributes.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this UserAttributes.
        The time-zone of the user

        :param time_zone: The time_zone of this UserAttributes.
        :type: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone

    @property
    def first_name(self):
        """
        Gets the first_name of this UserAttributes.
        The first name of the user

        :return: The first_name of this UserAttributes.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserAttributes.
        The first name of the user

        :param first_name: The first_name of this UserAttributes.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UserAttributes.
        The last name of the user

        :return: The last_name of this UserAttributes.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserAttributes.
        The last name of the user

        :param last_name: The last_name of this UserAttributes.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def phone(self):
        """
        Gets the phone of this UserAttributes.
        The phone number associated with the user

        :return: The phone of this UserAttributes.
        :rtype: object
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this UserAttributes.
        The phone number associated with the user

        :param phone: The phone of this UserAttributes.
        :type: object
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def mfa_enabled(self):
        """
        Gets the mfa_enabled of this UserAttributes.

        :return: The mfa_enabled of this UserAttributes.
        :rtype: object
        """
        return self._mfa_enabled

    @mfa_enabled.setter
    def mfa_enabled(self, mfa_enabled):
        """
        Sets the mfa_enabled of this UserAttributes.

        :param mfa_enabled: The mfa_enabled of this UserAttributes.
        :type: object
        """
        if mfa_enabled is None:
            raise ValueError("Invalid value for `mfa_enabled`, must not be `None`")

        self._mfa_enabled = mfa_enabled

    @property
    def disable_daily_emails(self):
        """
        Gets the disable_daily_emails of this UserAttributes.
        This option toggles the daily emails option

        :return: The disable_daily_emails of this UserAttributes.
        :rtype: object
        """
        return self._disable_daily_emails

    @disable_daily_emails.setter
    def disable_daily_emails(self, disable_daily_emails):
        """
        Sets the disable_daily_emails of this UserAttributes.
        This option toggles the daily emails option

        :param disable_daily_emails: The disable_daily_emails of this UserAttributes.
        :type: object
        """
        if disable_daily_emails is None:
            raise ValueError("Invalid value for `disable_daily_emails`, must not be `None`")

        self._disable_daily_emails = disable_daily_emails

    @property
    def locked(self):
        """
        Gets the locked of this UserAttributes.

        :return: The locked of this UserAttributes.
        :rtype: object
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """
        Sets the locked of this UserAttributes.

        :param locked: The locked of this UserAttributes.
        :type: object
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")

        self._locked = locked

    @property
    def locked_at(self):
        """
        Gets the locked_at of this UserAttributes.

        :return: The locked_at of this UserAttributes.
        :rtype: object
        """
        return self._locked_at

    @locked_at.setter
    def locked_at(self, locked_at):
        """
        Sets the locked_at of this UserAttributes.

        :param locked_at: The locked_at of this UserAttributes.
        :type: object
        """
        if locked_at is None:
            raise ValueError("Invalid value for `locked_at`, must not be `None`")

        self._locked_at = locked_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this UserAttributes.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this UserAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this UserAttributes.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this UserAttributes.
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
