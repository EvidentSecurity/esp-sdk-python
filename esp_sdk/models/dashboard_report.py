# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class DashboardReport(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, updated_at=None, stat=None, stat_id=None, external_account=None, external_account_id=None, team=None, team_id=None, errors=None):
        """
        DashboardReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'stat': 'DashboardStat',
            'stat_id': 'int',
            'external_account': 'ExternalAccount',
            'external_account_id': 'int',
            'team': 'Team',
            'team_id': 'int',
            'errors': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'stat': 'stat',
            'stat_id': 'stat_id',
            'external_account': 'external_account',
            'external_account_id': 'external_account_id',
            'team': 'team',
            'team_id': 'team_id',
            'errors': 'errors'
        }

        self._id = id
        self._created_at = created_at
        self._updated_at = updated_at
        self._stat = stat
        self._stat_id = stat_id
        self._external_account = external_account
        self._external_account_id = external_account_id
        self._team = team
        self._team_id = team_id
        self._errors = errors

    @property
    def id(self):
        """
        Gets the id of this DashboardReport.
        Unique ID

        :return: The id of this DashboardReport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DashboardReport.
        Unique ID

        :param id: The id of this DashboardReport.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this DashboardReport.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this DashboardReport.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this DashboardReport.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this DashboardReport.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this DashboardReport.
        ISO 8601 timestamp when the resource was last updated

        :return: The updated_at of this DashboardReport.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this DashboardReport.
        ISO 8601 timestamp when the resource was last updated

        :param updated_at: The updated_at of this DashboardReport.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def stat(self):
        """
        Gets the stat of this DashboardReport.
        Associated Stat

        :return: The stat of this DashboardReport.
        :rtype: DashboardStat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """
        Sets the stat of this DashboardReport.
        Associated Stat

        :param stat: The stat of this DashboardReport.
        :type: DashboardStat
        """

        self._stat = stat

    @property
    def stat_id(self):
        """
        Gets the stat_id of this DashboardReport.
        Associated Stat Id

        :return: The stat_id of this DashboardReport.
        :rtype: int
        """
        return self._stat_id

    @stat_id.setter
    def stat_id(self, stat_id):
        """
        Sets the stat_id of this DashboardReport.
        Associated Stat Id

        :param stat_id: The stat_id of this DashboardReport.
        :type: int
        """

        self._stat_id = stat_id

    @property
    def external_account(self):
        """
        Gets the external_account of this DashboardReport.
        Associated External Account

        :return: The external_account of this DashboardReport.
        :rtype: ExternalAccount
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """
        Sets the external_account of this DashboardReport.
        Associated External Account

        :param external_account: The external_account of this DashboardReport.
        :type: ExternalAccount
        """

        self._external_account = external_account

    @property
    def external_account_id(self):
        """
        Gets the external_account_id of this DashboardReport.
        Associated External Account Id

        :return: The external_account_id of this DashboardReport.
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """
        Sets the external_account_id of this DashboardReport.
        Associated External Account Id

        :param external_account_id: The external_account_id of this DashboardReport.
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def team(self):
        """
        Gets the team of this DashboardReport.
        Associated Team

        :return: The team of this DashboardReport.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """
        Sets the team of this DashboardReport.
        Associated Team

        :param team: The team of this DashboardReport.
        :type: Team
        """

        self._team = team

    @property
    def team_id(self):
        """
        Gets the team_id of this DashboardReport.
        Associated Team Id

        :return: The team_id of this DashboardReport.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this DashboardReport.
        Associated Team Id

        :param team_id: The team_id of this DashboardReport.
        :type: int
        """

        self._team_id = team_id

    @property
    def errors(self):
        """
        Gets the errors of this DashboardReport.
        Array of error messages if the request failed

        :return: The errors of this DashboardReport.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this DashboardReport.
        Array of error messages if the request failed

        :param errors: The errors of this DashboardReport.
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DashboardReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
