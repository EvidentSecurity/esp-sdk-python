# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ScheduledExportResult(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, uuid=None, expires_at=None, url=None, created_at=None, updated_at=None, scheduled_export=None, scheduled_export_id=None):
        """
        ScheduledExportResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'uuid': 'str',
            'expires_at': 'datetime',
            'url': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'scheduled_export': 'ScheduledExport',
            'scheduled_export_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'uuid': 'uuid',
            'expires_at': 'expires_at',
            'url': 'url',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'scheduled_export': 'scheduled_export',
            'scheduled_export_id': 'scheduled_export_id'
        }

        self._id = id
        self._uuid = uuid
        self._expires_at = expires_at
        self._url = url
        self._created_at = created_at
        self._updated_at = updated_at
        self._scheduled_export = scheduled_export
        self._scheduled_export_id = scheduled_export_id

    @property
    def id(self):
        """
        Gets the id of this ScheduledExportResult.
        Unique ID

        :return: The id of this ScheduledExportResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ScheduledExportResult.
        Unique ID

        :param id: The id of this ScheduledExportResult.
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """
        Gets the uuid of this ScheduledExportResult.
        The uuid to access the result

        :return: The uuid of this ScheduledExportResult.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ScheduledExportResult.
        The uuid to access the result

        :param uuid: The uuid of this ScheduledExportResult.
        :type: str
        """

        self._uuid = uuid

    @property
    def expires_at(self):
        """
        Gets the expires_at of this ScheduledExportResult.
        ISO 8601 timestamp when the result will expire

        :return: The expires_at of this ScheduledExportResult.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this ScheduledExportResult.
        ISO 8601 timestamp when the result will expire

        :param expires_at: The expires_at of this ScheduledExportResult.
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def url(self):
        """
        Gets the url of this ScheduledExportResult.
        A temporary URL where the file can be accessed

        :return: The url of this ScheduledExportResult.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ScheduledExportResult.
        A temporary URL where the file can be accessed

        :param url: The url of this ScheduledExportResult.
        :type: str
        """

        self._url = url

    @property
    def created_at(self):
        """
        Gets the created_at of this ScheduledExportResult.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this ScheduledExportResult.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ScheduledExportResult.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this ScheduledExportResult.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ScheduledExportResult.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this ScheduledExportResult.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ScheduledExportResult.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this ScheduledExportResult.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def scheduled_export(self):
        """
        Gets the scheduled_export of this ScheduledExportResult.
        Associated Scheduled Export

        :return: The scheduled_export of this ScheduledExportResult.
        :rtype: ScheduledExport
        """
        return self._scheduled_export

    @scheduled_export.setter
    def scheduled_export(self, scheduled_export):
        """
        Sets the scheduled_export of this ScheduledExportResult.
        Associated Scheduled Export

        :param scheduled_export: The scheduled_export of this ScheduledExportResult.
        :type: ScheduledExport
        """

        self._scheduled_export = scheduled_export

    @property
    def scheduled_export_id(self):
        """
        Gets the scheduled_export_id of this ScheduledExportResult.
        Associated Scheduled Export ID

        :return: The scheduled_export_id of this ScheduledExportResult.
        :rtype: int
        """
        return self._scheduled_export_id

    @scheduled_export_id.setter
    def scheduled_export_id(self, scheduled_export_id):
        """
        Sets the scheduled_export_id of this ScheduledExportResult.
        Associated Scheduled Export ID

        :param scheduled_export_id: The scheduled_export_id of this ScheduledExportResult.
        :type: int
        """

        self._scheduled_export_id = scheduled_export_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScheduledExportResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
