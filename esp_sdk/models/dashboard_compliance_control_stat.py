# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class DashboardComplianceControlStat(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, compliance_control=None, _pass=None, fail=None):
        """
        DashboardComplianceControlStat - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'compliance_control': 'ComplianceControl',
            '_pass': 'int',
            'fail': 'int'
        }

        self.attribute_map = {
            'compliance_control': 'compliance_control',
            '_pass': 'pass',
            'fail': 'fail'
        }

        self._compliance_control = compliance_control
        self.__pass = _pass
        self._fail = fail

    @property
    def compliance_control(self):
        """
        Gets the compliance_control of this DashboardComplianceControlStat.

        :return: The compliance_control of this DashboardComplianceControlStat.
        :rtype: ComplianceControl
        """
        return self._compliance_control

    @compliance_control.setter
    def compliance_control(self, compliance_control):
        """
        Sets the compliance_control of this DashboardComplianceControlStat.

        :param compliance_control: The compliance_control of this DashboardComplianceControlStat.
        :type: ComplianceControl
        """

        self._compliance_control = compliance_control

    @property
    def _pass(self):
        """
        Gets the _pass of this DashboardComplianceControlStat.

        :return: The _pass of this DashboardComplianceControlStat.
        :rtype: int
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """
        Sets the _pass of this DashboardComplianceControlStat.

        :param _pass: The _pass of this DashboardComplianceControlStat.
        :type: int
        """

        self.__pass = _pass

    @property
    def fail(self):
        """
        Gets the fail of this DashboardComplianceControlStat.

        :return: The fail of this DashboardComplianceControlStat.
        :rtype: int
        """
        return self._fail

    @fail.setter
    def fail(self, fail):
        """
        Sets the fail of this DashboardComplianceControlStat.

        :param fail: The fail of this DashboardComplianceControlStat.
        :type: int
        """

        self._fail = fail

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DashboardComplianceControlStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
