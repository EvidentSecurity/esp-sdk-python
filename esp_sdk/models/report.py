# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class Report(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, status=None, updated_at=None, external_account=None, external_account_id=None, alerts=None, stat=None):
        """
        Report - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'status': 'str',
            'updated_at': 'datetime',
            'external_account': 'ExternalAccount',
            'external_account_id': 'int',
            'alerts': 'list[Alert]',
            'stat': 'Stat'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'status': 'status',
            'updated_at': 'updated_at',
            'external_account': 'external_account',
            'external_account_id': 'external_account_id',
            'alerts': 'alerts',
            'stat': 'stat'
        }

        self._id = id
        self._created_at = created_at
        self._status = status
        self._updated_at = updated_at
        self._external_account = external_account
        self._external_account_id = external_account_id
        self._alerts = alerts
        self._stat = stat

    @property
    def id(self):
        """
        Gets the id of this Report.
        Unique ID

        :return: The id of this Report.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Report.
        Unique ID

        :param id: The id of this Report.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this Report.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this Report.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Report.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this Report.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def status(self):
        """
        Gets the status of this Report.
        Status of the report. Valid values are queued, processing, partial, complete, failed

        :return: The status of this Report.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Report.
        Status of the report. Valid values are queued, processing, partial, complete, failed

        :param status: The status of this Report.
        :type: str
        """

        self._status = status

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Report.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this Report.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Report.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this Report.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def external_account(self):
        """
        Gets the external_account of this Report.
        Associated External Account

        :return: The external_account of this Report.
        :rtype: ExternalAccount
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """
        Sets the external_account of this Report.
        Associated External Account

        :param external_account: The external_account of this Report.
        :type: ExternalAccount
        """

        self._external_account = external_account

    @property
    def external_account_id(self):
        """
        Gets the external_account_id of this Report.
        Associated External Account ID

        :return: The external_account_id of this Report.
        :rtype: int
        """
        return self._external_account_id

    @external_account_id.setter
    def external_account_id(self, external_account_id):
        """
        Sets the external_account_id of this Report.
        Associated External Account ID

        :param external_account_id: The external_account_id of this Report.
        :type: int
        """

        self._external_account_id = external_account_id

    @property
    def alerts(self):
        """
        Gets the alerts of this Report.
        Associated Alerts

        :return: The alerts of this Report.
        :rtype: list[Alert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """
        Sets the alerts of this Report.
        Associated Alerts

        :param alerts: The alerts of this Report.
        :type: list[Alert]
        """

        self._alerts = alerts

    @property
    def stat(self):
        """
        Gets the stat of this Report.
        Associated Stat

        :return: The stat of this Report.
        :rtype: Stat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """
        Sets the stat of this Report.
        Associated Stat

        :param stat: The stat of this Report.
        :type: Stat
        """

        self._stat = stat

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
