# coding: utf-8

"""
    ESP Documentation

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Report(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_at=None, updated_at=None, stat=None, external_account=None, team=None):
        """
        Report - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'stat': 'Stat',
            'external_account': 'ExternalAccount',
            'team': 'Team'
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'stat': 'stat',
            'external_account': 'external_account',
            'team': 'team'
        }

        self._created_at = created_at
        self._updated_at = updated_at
        self._stat = stat
        self._external_account = external_account
        self._team = team

    @property
    def created_at(self):
        """
        Gets the created_at of this Report.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this Report.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Report.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this Report.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Report.
        ISO 8601 timestamp when the resource was last updated

        :return: The updated_at of this Report.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Report.
        ISO 8601 timestamp when the resource was last updated

        :param updated_at: The updated_at of this Report.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def stat(self):
        """
        Gets the stat of this Report.

        :return: The stat of this Report.
        :rtype: Stat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """
        Sets the stat of this Report.

        :param stat: The stat of this Report.
        :type: Stat
        """

        self._stat = stat

    @property
    def external_account(self):
        """
        Gets the external_account of this Report.

        :return: The external_account of this Report.
        :rtype: ExternalAccount
        """
        return self._external_account

    @external_account.setter
    def external_account(self, external_account):
        """
        Sets the external_account of this Report.

        :param external_account: The external_account of this Report.
        :type: ExternalAccount
        """

        self._external_account = external_account

    @property
    def team(self):
        """
        Gets the team of this Report.

        :return: The team of this Report.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """
        Sets the team of this Report.

        :param team: The team of this Report.
        :type: Team
        """

        self._team = team

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
