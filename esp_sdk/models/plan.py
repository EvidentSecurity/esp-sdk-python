# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class Plan(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, amount=None, max_external_accounts=None, max_users=None, max_custom_signatures=None, plan_type=None, grandfathered=None):
        """
        Plan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'amount': 'int',
            'max_external_accounts': 'int',
            'max_users': 'int',
            'max_custom_signatures': 'int',
            'plan_type': 'str',
            'grandfathered': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'amount': 'amount',
            'max_external_accounts': 'max_external_accounts',
            'max_users': 'max_users',
            'max_custom_signatures': 'max_custom_signatures',
            'plan_type': 'plan_type',
            'grandfathered': 'grandfathered'
        }

        self._id = id
        self._name = name
        self._amount = amount
        self._max_external_accounts = max_external_accounts
        self._max_users = max_users
        self._max_custom_signatures = max_custom_signatures
        self._plan_type = plan_type
        self._grandfathered = grandfathered

    @property
    def id(self):
        """
        Gets the id of this Plan.
        Unique ID

        :return: The id of this Plan.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Plan.
        Unique ID

        :param id: The id of this Plan.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Plan.
        The name of the plan

        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Plan.
        The name of the plan

        :param name: The name of this Plan.
        :type: str
        """

        self._name = name

    @property
    def amount(self):
        """
        Gets the amount of this Plan.
        Cost of the plan per interval

        :return: The amount of this Plan.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Plan.
        Cost of the plan per interval

        :param amount: The amount of this Plan.
        :type: int
        """

        self._amount = amount

    @property
    def max_external_accounts(self):
        """
        Gets the max_external_accounts of this Plan.
        Number of external accounts allowed for this plan.

        :return: The max_external_accounts of this Plan.
        :rtype: int
        """
        return self._max_external_accounts

    @max_external_accounts.setter
    def max_external_accounts(self, max_external_accounts):
        """
        Sets the max_external_accounts of this Plan.
        Number of external accounts allowed for this plan.

        :param max_external_accounts: The max_external_accounts of this Plan.
        :type: int
        """

        self._max_external_accounts = max_external_accounts

    @property
    def max_users(self):
        """
        Gets the max_users of this Plan.
        Number of users allowed for this plan.

        :return: The max_users of this Plan.
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """
        Sets the max_users of this Plan.
        Number of users allowed for this plan.

        :param max_users: The max_users of this Plan.
        :type: int
        """

        self._max_users = max_users

    @property
    def max_custom_signatures(self):
        """
        Gets the max_custom_signatures of this Plan.
        Number of Custom Signatures allowed for this plan.

        :return: The max_custom_signatures of this Plan.
        :rtype: int
        """
        return self._max_custom_signatures

    @max_custom_signatures.setter
    def max_custom_signatures(self, max_custom_signatures):
        """
        Sets the max_custom_signatures of this Plan.
        Number of Custom Signatures allowed for this plan.

        :param max_custom_signatures: The max_custom_signatures of this Plan.
        :type: int
        """

        self._max_custom_signatures = max_custom_signatures

    @property
    def plan_type(self):
        """
        Gets the plan_type of this Plan.
        Kind of plan. Valid values are appliance, enterprise, free, stripe

        :return: The plan_type of this Plan.
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """
        Sets the plan_type of this Plan.
        Kind of plan. Valid values are appliance, enterprise, free, stripe

        :param plan_type: The plan_type of this Plan.
        :type: str
        """

        self._plan_type = plan_type

    @property
    def grandfathered(self):
        """
        Gets the grandfathered of this Plan.
        Changes to the plan are prohibited if grandfathered is true.

        :return: The grandfathered of this Plan.
        :rtype: bool
        """
        return self._grandfathered

    @grandfathered.setter
    def grandfathered(self, grandfathered):
        """
        Sets the grandfathered of this Plan.
        Changes to the plan are prohibited if grandfathered is true.

        :param grandfathered: The grandfathered of this Plan.
        :type: bool
        """

        self._grandfathered = grandfathered

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Plan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
