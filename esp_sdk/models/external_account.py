# coding: utf-8

"""
    ESP Documentation

    The Evident Security Platform API (version 2.0) is designed to allow users granular control over their Amazon Web Service security experience by allowing them to review alerts, monitor signatures, and create custom signatures.

    OpenAPI spec version: v2_sdk
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ExternalAccount(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, name=None, updated_at=None, provider=None, team=None, team_id=None, scan_intervals=None, disabled_signatures=None, suppressions=None, suppression_ids=None, azure_group=None, credentials=None):
        """
        ExternalAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'name': 'str',
            'updated_at': 'datetime',
            'provider': 'str',
            'team': 'Team',
            'team_id': 'int',
            'scan_intervals': 'list[ScanInterval]',
            'disabled_signatures': 'list[Signature]',
            'suppressions': 'list[Suppression]',
            'suppression_ids': 'list[int]',
            'azure_group': 'AzureGroup',
            'credentials': 'ExternalAccountAmazonIam'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'name': 'name',
            'updated_at': 'updated_at',
            'provider': 'provider',
            'team': 'team',
            'team_id': 'team_id',
            'scan_intervals': 'scan_intervals',
            'disabled_signatures': 'disabled_signatures',
            'suppressions': 'suppressions',
            'suppression_ids': 'suppression_ids',
            'azure_group': 'azure_group',
            'credentials': 'credentials'
        }

        self._id = id
        self._created_at = created_at
        self._name = name
        self._updated_at = updated_at
        self._provider = provider
        self._team = team
        self._team_id = team_id
        self._scan_intervals = scan_intervals
        self._disabled_signatures = disabled_signatures
        self._suppressions = suppressions
        self._suppression_ids = suppression_ids
        self._azure_group = azure_group
        self._credentials = credentials

    @property
    def id(self):
        """
        Gets the id of this ExternalAccount.
        Unique ID

        :return: The id of this ExternalAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ExternalAccount.
        Unique ID

        :param id: The id of this ExternalAccount.
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this ExternalAccount.
        ISO 8601 timestamp when the resource was created

        :return: The created_at of this ExternalAccount.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ExternalAccount.
        ISO 8601 timestamp when the resource was created

        :param created_at: The created_at of this ExternalAccount.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def name(self):
        """
        Gets the name of this ExternalAccount.
        Name

        :return: The name of this ExternalAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ExternalAccount.
        Name

        :param name: The name of this ExternalAccount.
        :type: str
        """

        self._name = name

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ExternalAccount.
        ISO 8601 timestamp when the resource was updated

        :return: The updated_at of this ExternalAccount.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ExternalAccount.
        ISO 8601 timestamp when the resource was updated

        :param updated_at: The updated_at of this ExternalAccount.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def provider(self):
        """
        Gets the provider of this ExternalAccount.
        The cloud provider this account is for

        :return: The provider of this ExternalAccount.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this ExternalAccount.
        The cloud provider this account is for

        :param provider: The provider of this ExternalAccount.
        :type: str
        """

        self._provider = provider

    @property
    def team(self):
        """
        Gets the team of this ExternalAccount.
        Associated Team

        :return: The team of this ExternalAccount.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """
        Sets the team of this ExternalAccount.
        Associated Team

        :param team: The team of this ExternalAccount.
        :type: Team
        """

        self._team = team

    @property
    def team_id(self):
        """
        Gets the team_id of this ExternalAccount.
        Associated Team ID

        :return: The team_id of this ExternalAccount.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this ExternalAccount.
        Associated Team ID

        :param team_id: The team_id of this ExternalAccount.
        :type: int
        """

        self._team_id = team_id

    @property
    def scan_intervals(self):
        """
        Gets the scan_intervals of this ExternalAccount.
        Associated Scan Intervals

        :return: The scan_intervals of this ExternalAccount.
        :rtype: list[ScanInterval]
        """
        return self._scan_intervals

    @scan_intervals.setter
    def scan_intervals(self, scan_intervals):
        """
        Sets the scan_intervals of this ExternalAccount.
        Associated Scan Intervals

        :param scan_intervals: The scan_intervals of this ExternalAccount.
        :type: list[ScanInterval]
        """

        self._scan_intervals = scan_intervals

    @property
    def disabled_signatures(self):
        """
        Gets the disabled_signatures of this ExternalAccount.
        Associated Disabled Signatures

        :return: The disabled_signatures of this ExternalAccount.
        :rtype: list[Signature]
        """
        return self._disabled_signatures

    @disabled_signatures.setter
    def disabled_signatures(self, disabled_signatures):
        """
        Sets the disabled_signatures of this ExternalAccount.
        Associated Disabled Signatures

        :param disabled_signatures: The disabled_signatures of this ExternalAccount.
        :type: list[Signature]
        """

        self._disabled_signatures = disabled_signatures

    @property
    def suppressions(self):
        """
        Gets the suppressions of this ExternalAccount.
        Associated Suppressions

        :return: The suppressions of this ExternalAccount.
        :rtype: list[Suppression]
        """
        return self._suppressions

    @suppressions.setter
    def suppressions(self, suppressions):
        """
        Sets the suppressions of this ExternalAccount.
        Associated Suppressions

        :param suppressions: The suppressions of this ExternalAccount.
        :type: list[Suppression]
        """

        self._suppressions = suppressions

    @property
    def suppression_ids(self):
        """
        Gets the suppression_ids of this ExternalAccount.
        Associated Suppressions IDs

        :return: The suppression_ids of this ExternalAccount.
        :rtype: list[int]
        """
        return self._suppression_ids

    @suppression_ids.setter
    def suppression_ids(self, suppression_ids):
        """
        Sets the suppression_ids of this ExternalAccount.
        Associated Suppressions IDs

        :param suppression_ids: The suppression_ids of this ExternalAccount.
        :type: list[int]
        """

        self._suppression_ids = suppression_ids

    @property
    def azure_group(self):
        """
        Gets the azure_group of this ExternalAccount.
        Associated Azure Group

        :return: The azure_group of this ExternalAccount.
        :rtype: AzureGroup
        """
        return self._azure_group

    @azure_group.setter
    def azure_group(self, azure_group):
        """
        Sets the azure_group of this ExternalAccount.
        Associated Azure Group

        :param azure_group: The azure_group of this ExternalAccount.
        :type: AzureGroup
        """

        self._azure_group = azure_group

    @property
    def credentials(self):
        """
        Gets the credentials of this ExternalAccount.
        Associated Credentials

        :return: The credentials of this ExternalAccount.
        :rtype: ExternalAccountAmazonIam
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """
        Sets the credentials of this ExternalAccount.
        Associated Credentials

        :param credentials: The credentials of this ExternalAccount.
        :type: ExternalAccountAmazonIam
        """

        self._credentials = credentials

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExternalAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
