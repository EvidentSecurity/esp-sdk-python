# coding: utf-8

"""
    ESP Documentation

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
from ..extensions.base_object import BaseObject
import re


class ExternalAccount(BaseObject):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, relationships=None, errors=None, id=None, account=None, arn=None, created_at=None, external_id=None, name=None, updated_at=None, cloudtrail_name=None, organization=None, organization_id=None, sub_organization=None, sub_organization_id=None, team=None, team_id=None):
        """
        ExternalAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'relationships': 'object',
            'errors': 'list[str]',
            'id': 'int',
            'account': 'str',
            'arn': 'str',
            'created_at': 'datetime',
            'external_id': 'str',
            'name': 'str',
            'updated_at': 'datetime',
            'cloudtrail_name': 'str',
            'organization': 'Organization',
            'organization_id': 'int',
            'sub_organization': 'SubOrganization',
            'sub_organization_id': 'int',
            'team': 'Team',
            'team_id': 'int'
        }

        self.attribute_map = {
            'relationships': 'relationships',
            'errors': 'errors',
            'id': 'id',
            'account': 'account',
            'arn': 'arn',
            'created_at': 'created_at',
            'external_id': 'external_id',
            'name': 'name',
            'updated_at': 'updated_at',
            'cloudtrail_name': 'cloudtrail_name',
            'organization': 'organization',
            'organization_id': 'organization_id',
            'sub_organization': 'sub_organization',
            'sub_organization_id': 'sub_organization_id',
            'team': 'team',
            'team_id': 'team_id'
        }

        self._relationships = relationships
        self._errors = errors
        self._id = id
        self._account = account
        self._arn = arn
        self._created_at = created_at
        self._external_id = external_id
        self._name = name
        self._updated_at = updated_at
        self._cloudtrail_name = cloudtrail_name
        self._organization = organization
        self._organization_id = organization_id
        self._sub_organization = sub_organization
        self._sub_organization_id = sub_organization_id
        self._team = team
        self._team_id = team_id

    @property
    def relationships(self):
        """
        Gets the relationships of this ExternalAccount.
        Links to Associated Objects

        :return: The relationships of this ExternalAccount.
        :rtype: object
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """
        Sets the relationships of this ExternalAccount.
        Links to Associated Objects

        :param relationships: The relationships of this ExternalAccount.
        :type: object
        """

        self._relationships = relationships

    @property
    def errors(self):
        """
        Gets the errors of this ExternalAccount.
        Array of error messages if the request failed

        :return: The errors of this ExternalAccount.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this ExternalAccount.
        Array of error messages if the request failed

        :param errors: The errors of this ExternalAccount.
        :type: list[str]
        """

        self._errors = errors

    @property
    def id(self):
        """
        Gets the id of this ExternalAccount.
        Unique Id

        :return: The id of this ExternalAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ExternalAccount.
        Unique Id

        :param id: The id of this ExternalAccount.
        :type: int
        """

        self._id = id

    @property
    def account(self):
        """
        Gets the account of this ExternalAccount.
        The name of the account created

        :return: The account of this ExternalAccount.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this ExternalAccount.
        The name of the account created

        :param account: The account of this ExternalAccount.
        :type: str
        """

        self._account = account

    @property
    def arn(self):
        """
        Gets the arn of this ExternalAccount.
        Amazon Resource Name for the IAM role

        :return: The arn of this ExternalAccount.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """
        Sets the arn of this ExternalAccount.
        Amazon Resource Name for the IAM role

        :param arn: The arn of this ExternalAccount.
        :type: str
        """

        self._arn = arn

    @property
    def created_at(self):
        """
        Gets the created_at of this ExternalAccount.
        Created At

        :return: The created_at of this ExternalAccount.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ExternalAccount.
        Created At

        :param created_at: The created_at of this ExternalAccount.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def external_id(self):
        """
        Gets the external_id of this ExternalAccount.
        External Identifier set on the role

        :return: The external_id of this ExternalAccount.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this ExternalAccount.
        External Identifier set on the role

        :param external_id: The external_id of this ExternalAccount.
        :type: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """
        Gets the name of this ExternalAccount.
        Name

        :return: The name of this ExternalAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ExternalAccount.
        Name

        :param name: The name of this ExternalAccount.
        :type: str
        """

        self._name = name

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ExternalAccount.
        Updated At

        :return: The updated_at of this ExternalAccount.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ExternalAccount.
        Updated At

        :param updated_at: The updated_at of this ExternalAccount.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def cloudtrail_name(self):
        """
        Gets the cloudtrail_name of this ExternalAccount.
        Cloudtrail Name

        :return: The cloudtrail_name of this ExternalAccount.
        :rtype: str
        """
        return self._cloudtrail_name

    @cloudtrail_name.setter
    def cloudtrail_name(self, cloudtrail_name):
        """
        Sets the cloudtrail_name of this ExternalAccount.
        Cloudtrail Name

        :param cloudtrail_name: The cloudtrail_name of this ExternalAccount.
        :type: str
        """

        self._cloudtrail_name = cloudtrail_name

    @property
    def organization(self):
        """
        Gets the organization of this ExternalAccount.
        Associated Organization

        :return: The organization of this ExternalAccount.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this ExternalAccount.
        Associated Organization

        :param organization: The organization of this ExternalAccount.
        :type: Organization
        """

        self._organization = organization

    @property
    def organization_id(self):
        """
        Gets the organization_id of this ExternalAccount.
        Associated Organization Id

        :return: The organization_id of this ExternalAccount.
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this ExternalAccount.
        Associated Organization Id

        :param organization_id: The organization_id of this ExternalAccount.
        :type: int
        """

        self._organization_id = organization_id

    @property
    def sub_organization(self):
        """
        Gets the sub_organization of this ExternalAccount.
        Associated Sub Organization

        :return: The sub_organization of this ExternalAccount.
        :rtype: SubOrganization
        """
        return self._sub_organization

    @sub_organization.setter
    def sub_organization(self, sub_organization):
        """
        Sets the sub_organization of this ExternalAccount.
        Associated Sub Organization

        :param sub_organization: The sub_organization of this ExternalAccount.
        :type: SubOrganization
        """

        self._sub_organization = sub_organization

    @property
    def sub_organization_id(self):
        """
        Gets the sub_organization_id of this ExternalAccount.
        Associated Sub Organization Id

        :return: The sub_organization_id of this ExternalAccount.
        :rtype: int
        """
        return self._sub_organization_id

    @sub_organization_id.setter
    def sub_organization_id(self, sub_organization_id):
        """
        Sets the sub_organization_id of this ExternalAccount.
        Associated Sub Organization Id

        :param sub_organization_id: The sub_organization_id of this ExternalAccount.
        :type: int
        """

        self._sub_organization_id = sub_organization_id

    @property
    def team(self):
        """
        Gets the team of this ExternalAccount.
        Associated Team

        :return: The team of this ExternalAccount.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """
        Sets the team of this ExternalAccount.
        Associated Team

        :param team: The team of this ExternalAccount.
        :type: Team
        """

        self._team = team

    @property
    def team_id(self):
        """
        Gets the team_id of this ExternalAccount.
        Associated Team Id

        :return: The team_id of this ExternalAccount.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this ExternalAccount.
        Associated Team Id

        :param team_id: The team_id of this ExternalAccount.
        :type: int
        """

        self._team_id = team_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExternalAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
